<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gapotchenko.FX</name>
    </assembly>
    <members>
        <member name="T:Gapotchenko.FX.ArrayEqualityComparer">
            <summary>
            Optimized and fast equality comparer for one-dimensional arrays.
            </summary>
        </member>
        <member name="M:Gapotchenko.FX.ArrayEqualityComparer.Equals``1(``0[],``0[])">
            <summary>
            Determines whether the specified arrays are equal.
            </summary>
            <typeparam name="T">The array element type.</typeparam>
            <param name="x">The first array to compare.</param>
            <param name="y">The second array to compare.</param>
            <returns><c>true</c> if the specified arrays are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.ArrayEqualityComparer.GetHashCode``1(``0[])">
            <summary>
            Returns a hash code for the specified array.
            </summary>
            <typeparam name="T">The array element type.</typeparam>
            <param name="array">The array.</param>
            <returns>A hash code for the specified array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.ArrayEqualityComparer.Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified arrays are equal.
            </summary>
            <remarks>This method overshadows <see cref="M:System.Object.Equals(System.Object,System.Object)"/> to avoid a comparison by reference pitfall.</remarks>
            <param name="x">The first array to compare.</param>
            <param name="y">The second array to compare.</param>
            <returns><c>true</c> if the specified arrays are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.ArrayEqualityComparer.Create``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a new equality comparer for one-dimensional array with a specified comparer for elements.
            </summary>
            <typeparam name="T">The type of array elements.</typeparam>
            <param name="elementComparer">The equality comparer for array elements.</param>
            <returns>A new equality comparer for one-dimensional array with elements of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:Gapotchenko.FX.ArrayEqualityComparer`1">
            <summary>
            Optimized and fast equality comparer for one-dimensional arrays.
            </summary>
        </member>
        <member name="P:Gapotchenko.FX.ArrayEqualityComparer`1.Default">
            <summary>
            Returns a default equality comparer for one-dimensional array with an element type specified by the generic argument <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="T:Gapotchenko.FX.BigEndianBitConverter">
            <summary>
            Converts base data types to an array of bytes, and an array of bytes to base data types in big-endian byte order.
            </summary>
            <remarks>
            <seealso cref="T:Gapotchenko.FX.LittleEndianBitConverter"/>
            </remarks>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.GetBytes(System.Int32)">
            <summary>
            Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.FillBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Fills the array with four bytes of the specified 32-bit signed integer value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is to be stored at <paramref name="buffer"/>.</param>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.FillBytes(System.Int32,System.Byte[])">
            <summary>
            Fills the array with four bytes of the specified 32-bit signed integer value.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.GetBytes(System.UInt32)">
            <summary>
            Returns the specified 32-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.FillBytes(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Fills the array with four bytes of the specified 32-bit unsigned integer value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is to be stored at <paramref name="buffer"/>.</param>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.FillBytes(System.UInt32,System.Byte[])">
            <summary>
            Fills the array with four bytes of the specified 32-bit unsigned integer value.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.GetBytes(System.Int16)">
            <summary>
            Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.FillBytes(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Fills the array with two bytes of the specified 16-bit signed integer value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is to be stored at <paramref name="buffer"/>.</param>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.FillBytes(System.Int16,System.Byte[])">
            <summary>
            Fills the array with two bytes of the specified 16-bit signed integer value.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.GetBytes(System.UInt16)">
            <summary>
            Returns the specified 16-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.FillBytes(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            Fills the array with two bytes of the specified 16-bit unsigned integer value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is to be stored at <paramref name="buffer"/>.</param>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.FillBytes(System.UInt16,System.Byte[])">
            <summary>
            Fills the array with two bytes of the specified 16-bit unsigned integer value.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.GetBytes(System.Int64)">
            <summary>
            Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.FillBytes(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Fills the array with eight bytes of the specified 64-bit signed integer value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is to be stored at <paramref name="buffer"/>.</param>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.FillBytes(System.Int64,System.Byte[])">
            <summary>
            Fills the array with eight bytes of the specified 64-bit signed integer value.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.GetBytes(System.UInt64)">
            <summary>
            Returns the specified 64-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.FillBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Fills the array with eight bytes of the specified 64-bit unsigned integer value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is to be stored at <paramref name="buffer"/>.</param>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.FillBytes(System.UInt64,System.Byte[])">
            <summary>
            Fills the array with eight bytes of the specified 64-bit unsigned integer value.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.GetBytes(System.Single)">
            <summary>
            Returns the specified single-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.FillBytes(System.Single,System.Byte[],System.Int32)">
            <summary>
            Fills the array with four bytes of the specified single-precision floating point value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is to be stored at <paramref name="buffer"/>.</param>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.FillBytes(System.Single,System.Byte[])">
            <summary>
            Fills the array with four bytes of the specified single-precision floating point value.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.GetBytes(System.Double)">
            <summary>
            Returns the specified double-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.FillBytes(System.Double,System.Byte[],System.Int32)">
            <summary>
            Fills the array with eight bytes of the specified double-precision floating point value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is to be stored at <paramref name="buffer"/>.</param>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.FillBytes(System.Double,System.Byte[])">
            <summary>
            Fills the array with eight bytes of the specified double-precision floating point value.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.GetBytes(System.Decimal)">
            <summary>
            Returns the specified decimal value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 16.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.FillBytes(System.Decimal,System.Byte[],System.Int32)">
            <summary>
            Fills the array with sixteen bytes of the specified decimal value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is to be stored at <paramref name="buffer"/>.</param>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.FillBytes(System.Decimal,System.Byte[])">
            <summary>
            Fills the array with sixteen bytes of the specified decimal value.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.GetBytes(System.Boolean)">
            <summary>
            Returns the specified <see cref="T:System.Boolean"/> value as an array of bytes.
            </summary>
            <param name="value">A <see cref="T:System.Boolean"/> value.</param>
            <returns>An array of bytes with length 1.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.FillBytes(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Fills the array with one byte of the specified <see cref="T:System.Boolean"/> value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">A <see cref="T:System.Boolean"/> value.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is to be stored at <paramref name="buffer"/>.</param>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.FillBytes(System.Boolean,System.Byte[])">
            <summary>
            Fills the array with one byte of the specified <see cref="T:System.Boolean"/> value beginning.
            </summary>
            <param name="value">A <see cref="T:System.Boolean"/> value.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 32-bit signed integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.ToInt32(System.Byte[])">
            <summary>
            Returns a 32-bit signed integer converted from the first four bytes of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A 32-bit signed integer formed by the first four bytes of a byte array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 32-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.ToUInt32(System.Byte[])">
            <summary>
            Returns a 32-bit unsigned integer converted from the first four bytes of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A 32-bit unsigned integer formed by the first four bytes of a byte array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.ToInt16(System.Byte[])">
            <summary>
            Returns a 16-bit signed integer converted from the first two bytes of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A 16-bit signed integer formed by the first two bytes of a byte array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit unsigned integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.ToUInt16(System.Byte[])">
            <summary>
            Returns a 16-bit unsigned integer converted from the first two bytes of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A 16-bit unsigned integer formed by the first two bytes of a byte array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.ToInt64(System.Byte[])">
            <summary>
            Returns a 64-bit signed integer converted from the first eight bytes of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A 64-bit signed integer formed by the first eight bytes of a byte array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit unsigned integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.ToUInt64(System.Byte[])">
            <summary>
            Returns a 64-bit unsigned integer converted from the first eight bytes of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A 64-bit unsigned integer formed by the first eight bytes of a byte array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.ToSingle(System.Byte[],System.Int32)">
            <summary>
            Returns a single-precision floating point number converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A single-precision floating point number formed by four bytes beginning at <paramref name="startIndex"/>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.ToSingle(System.Byte[])">
            <summary>
            Returns a single-precision floating point number converted from four bytes of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A single-precision floating point number formed by four bytes of a byte array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.ToDouble(System.Byte[],System.Int32)">
            <summary>
            Returns a double-precision floating point number converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A double-precision floating point number formed by eight bytes beginning at <paramref name="startIndex"/>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.ToDouble(System.Byte[])">
            <summary>
            Returns a double-precision floating point number converted from eight bytes of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A double-precision floating point number formed by eight bytes of a byte array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.ToDecimal(System.Byte[],System.Int32)">
            <summary>
            Returns a decimal number converted from sixteen bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A decimal number formed by sixteen bytes beginning at <paramref name="startIndex"/>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.ToDecimal(System.Byte[])">
            <summary>
            Returns a decimal number converted from sixteen bytes of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A decimal number formed by sixteen of a byte array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.ToBoolean(System.Byte[],System.Int32)">
            <summary>
            Returns a Boolean value converted from one byte at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns><c>true</c> if the byte at startIndex in value is nonzero; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.BigEndianBitConverter.ToBoolean(System.Byte[])">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value converted from the first byte of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns><c>true</c> if the first byte of a byte array is nonzero; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Gapotchenko.FX.BigEndianBitConverter.Instance">
            <summary>
            Returns a default bit converter instance for big-endian byte order.
            </summary>
        </member>
        <member name="T:Gapotchenko.FX.ComponentModel.Disposable">
            <summary>
            Defines a base class for disposable objects that implement a finalizer pattern.
            </summary>
        </member>
        <member name="M:Gapotchenko.FX.ComponentModel.Disposable.Finalize">
            <summary>
            Finalizes the instance of <see cref="T:Gapotchenko.FX.ComponentModel.Disposable"/> class.
            </summary>
        </member>
        <member name="M:Gapotchenko.FX.ComponentModel.Disposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Gapotchenko.FX.ComponentModel.Disposable.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources;
            <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Gapotchenko.FX.ComponentModel.Disposable.Clear``1(``0@)">
            <summary>
            Tries to clear a disposable object at the specified reference
            by calling <see cref="M:System.IDisposable.Dispose"/> method and setting its value to <c>null</c>.
            </summary>
            <remarks>
            <para>
            The method does not provide thread safety guarantees except memory model consistency.
            As a result, the <see cref="M:System.IDisposable.Dispose"/> method of a disposable object may be invoked several times
            when the <see cref="M:Gapotchenko.FX.ComponentModel.Disposable.Clear``1(``0@)"/> method is called concurrently from multiple threads.
            </para>
            <seealso cref="M:Gapotchenko.FX.ComponentModel.Disposable.Clear``1(``0@,System.Boolean)"/>
            </remarks>
            <typeparam name="T">The type of disposable object.</typeparam>
            <param name="value">The reference to disposable value.</param>
            <returns><c>true</c> when the object has been disposed and the value cleared; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Gapotchenko.FX.ComponentModel.Disposable.Clear``1(``0@,System.Boolean)">
            <summary>
            Tries to clear a disposable object at the specified reference
            by calling <see cref="M:System.IDisposable.Dispose"/> method and setting its value to <c>null</c>.
            </summary>
            <remarks>
            <para>
            This method works in different thread safety modes depending on a value of <paramref name="isThreadSafe"/> parameter.
            </para>
            <para>
            When <paramref name="isThreadSafe"/> is <c>false</c>, the method does not provide thread safety guarantees except memory model consistency.
            As a result, the <see cref="M:System.IDisposable.Dispose"/> method of a disposable object may be invoked several times
            when the <see cref="M:Gapotchenko.FX.ComponentModel.Disposable.Clear``1(``0@,System.Boolean)"/> method is called concurrently from multiple threads.
            </para>
            <para>
            When <paramref name="isThreadSafe"/> is <c>true</c>, the method provides a publication and execution thread safety.
            As a result, the <see cref="M:System.IDisposable.Dispose"/> method of a disposable object is invoked exactly once even
            when the <see cref="M:Gapotchenko.FX.ComponentModel.Disposable.Clear``1(``0@,System.Boolean)"/> method is called concurrently from multiple threads.
            </para>
            </remarks>
            <typeparam name="T">The type of disposable object.</typeparam>
            <param name="value">The reference to disposable value.</param>
            <param name="isThreadSafe">
            <c>true</c> to make the method usable concurrently by multiple threads;
            <c>false</c> to make the method usable by one thread at a time.
            </param>
            <returns><c>true</c> when the object has been disposed and the value cleared; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Gapotchenko.FX.DefaultArrayEqualityComparer`1.Equals(`0[],`0[])">
            <summary>
            Determines whether the specified arrays are equal.
            </summary>
            <param name="x">The first array to compare.</param>
            <param name="y">The second array to compare.</param>
            <returns><c>true</c> if the specified arrays are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.DefaultArrayEqualityComparer`1.GetHashCode(`0[])">
            <summary>
            Returns a hash code for the specified array.
            </summary>
            <param name="obj">The array for which a hash code is to be returned.</param>
            <returns>A hash code for the specified array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.DefaultArrayEqualityComparer`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Gapotchenko.FX.ArrayEqualityComparer`1"/>.
            </summary>
            <param name="obj">The object to compare with the current <see cref="T:Gapotchenko.FX.ArrayEqualityComparer`1"/>.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Gapotchenko.FX.ArrayEqualityComparer`1"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Gapotchenko.FX.DefaultArrayEqualityComparer`1.GetHashCode">
            <summary>
            Returns a hash code for <see cref="T:Gapotchenko.FX.ArrayEqualityComparer`1"/>.
            </summary>
            <returns>A hash code for <see cref="T:Gapotchenko.FX.ArrayEqualityComparer`1"/>.</returns>
        </member>
        <member name="T:Gapotchenko.FX.Empty">
            <summary>
            Provides operations related to a functional notion of emptiness.
            </summary>
        </member>
        <member name="M:Gapotchenko.FX.Empty.Nullify``1(``0)">
            <summary>
            Nullifies an empty collection.
            </summary>
            <typeparam name="TSource">The type of the input collection.</typeparam>
            <param name="source">The source collection.</param>
            <returns>The source or a null collection if the source is empty or null.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Empty.Nullify``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Nullifies an empty sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of the input sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>The source or a null sequence if the source is empty or null.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Empty.Nullify``1(``0[])">
            <summary>
            Nullifies an empty array.
            </summary>
            <typeparam name="TSource">The type of the elements of the input array.</typeparam>
            <param name="source">The source array.</param>
            <returns>The source or a null array if the source is empty or null.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Empty.Nullify(System.String)">
            <summary>
            Nullifies an empty string.
            </summary>
            <param name="source">The source string.</param>
            <returns>The source or a null string if the source is empty or null.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Empty.Nullify(System.SByte)">
            <summary>
            Nullifies a zero <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The value.</param>
            <returns>The value or a <c>null</c> if the value is zero.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Empty.Nullify(System.Byte)">
            <summary>
            Nullifies a zero <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The value.</param>
            <returns>The value or a <c>null</c> if the value is zero.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Empty.Nullify(System.Int16)">
            <summary>
            Nullifies a zero <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The value.</param>
            <returns>The value or a <c>null</c> if the value is zero.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Empty.Nullify(System.UInt16)">
            <summary>
            Nullifies a zero <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The value.</param>
            <returns>The value or a <c>null</c> if the value is zero.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Empty.Nullify(System.Int32)">
            <summary>
            Nullifies a zero <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The value.</param>
            <returns>The value or a <c>null</c> if the value is zero.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Empty.Nullify(System.UInt32)">
            <summary>
            Nullifies a zero <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The value.</param>
            <returns>The value or a <c>null</c> if the value is zero.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Empty.Nullify(System.Int64)">
            <summary>
            Nullifies a zero <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The value.</param>
            <returns>The value or a <c>null</c> if the value is zero.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Empty.Nullify(System.UInt64)">
            <summary>
            Nullifies a zero <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The value.</param>
            <returns>The value or a <c>null</c> if the value is zero.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Empty.NullifyWhiteSpace(System.String)">
            <summary>
            Nullifies a string when it is empty, or consists only of white-space characters.
            </summary>
            <param name="source">The source string.</param>
            <returns>The source or a null string if the source is empty, or consists only of white-space characters.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Empty.Nullify(System.Action)">
            <summary>
            Nullifies an empty function in terms of lambda calculus provided by <see cref="T:Gapotchenko.FX.Fn"/> class.
            </summary>
            <param name="action">The action.</param>
            <returns>The value of <paramref name="action"/> or <c>null</c> if it represents an empty function in terms of lambda calculus.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Empty.Nullify``1(System.Func{``0})">
            <summary>
            Nullifies a default function in terms of lambda calculus provided by <see cref="T:Gapotchenko.FX.Fn"/> class.
            </summary>
            <param name="func">The function.</param>
            <returns>The value of <paramref name="func"/> or <c>null</c> if it represents a default function in terms of lambda calculus.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Empty.Nullify``1(System.Func{``0,``0})">
            <summary>
            Nullifies an identity function in terms of lambda calculus provided by <see cref="T:Gapotchenko.FX.Fn"/> class.
            </summary>
            <param name="func">The function.</param>
            <returns>The value of <paramref name="func"/> or <c>null</c> if it represents an identity function in terms of lambda calculus.</returns>
        </member>
        <member name="T:Gapotchenko.FX.Empty`1">
            <summary>
            Provides typed constructions related to a functional notion of emptiness.
            </summary>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="P:Gapotchenko.FX.Empty`1.Array">
            <summary>
            Gets an empty array instance.
            </summary>
        </member>
        <member name="T:Gapotchenko.FX.ExceptionExtensions">
            <summary>
            Exception extensions.
            </summary>
        </member>
        <member name="M:Gapotchenko.FX.ExceptionExtensions.IsCancellationException(System.Exception)">
            <summary>
            <para>
            Checks whether exception signifies a cancellation of a thread or task.
            </para>
            <para>
            There is a predefined set of such exceptions:
            <see cref="T:System.Threading.ThreadInterruptedException"/>, <see cref="T:System.Threading.ThreadAbortException"/>, <see cref="T:System.Threading.Tasks.TaskCanceledException"/> and
            <see cref="T:System.OperationCanceledException"/>.
            </para>
            </summary>
            <param name="exception">The exception.</param>
            <returns><c>true</c> if exception signifies a cancellation of a thread or task; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.ExceptionExtensions.IsControlFlowException(System.Exception)">
            <summary>
            <para>
            Checks whether exception is intended to affect the control flow of code execution.
            </para>
            <para>
            There is a predefined set of such exceptions:
            all the cancellation exceptions reported by <see cref="M:Gapotchenko.FX.ExceptionExtensions.IsCancellationException(System.Exception)"/>, and
            <see cref="T:System.StackOverflowException"/>.
            </para>
            <para>
            The list can be semantically extended by deriving a custom exception from <see cref="T:Gapotchenko.FX.IControlFlowException"/>.
            </para>
            </summary>
            <param name="exception">The exception.</param>
            <returns><c>true</c> if exception represents a control flow exception; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.ExceptionExtensions.RethrowControlFlowException(System.Exception)">
            <summary>
            Rethrows a control flow exception if it is represented by the exception itself, or there is any in a chain of its inner exceptions.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Gapotchenko.FX.ExceptionExtensions.InnerExceptions(System.Exception)">
            <summary>
            Returns a collection of nested inner exceptions that caused the current exception.
            </summary>
            <param name="exception">The current exception.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of nested inner <see cref="T:System.Exception"/> values that caused the current exception.</returns>
        </member>
        <member name="M:Gapotchenko.FX.ExceptionExtensions.SelfAndInnerExceptions(System.Exception)">
            <summary>
            Returns a collection of nested inner exceptions that caused the current exception including self.
            </summary>
            <param name="exception">The current exception.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of nested inner <see cref="T:System.Exception"/> values that caused the current exception including self.</returns>
        </member>
        <member name="T:Gapotchenko.FX.Fn">
            <summary>
            Provides primitives for lambda calculus and functional composition.
            </summary>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Aggregate``1(System.Func{``0,``0,``0},``0,``0,``0)">
            <summary>
            Applies a specified accumulator function over a specified sequence of values.
            </summary>
            <typeparam name="T">The type of values to aggregate.</typeparam>
            <param name="f">The accumulator function.</param>
            <param name="val1">The first of three values to aggregate.</param>
            <param name="val2">The second of three values to aggregate.</param>
            <param name="val3">The third of three values to aggregate.</param>
            <returns>The final aggregated value calculated as <c>f(f(val1, val2), val3)</c>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Aggregate``1(System.Func{``0,``0,``0},``0,``0,``0,``0)">
            <summary>
            Applies a specified accumulator function over a specified sequence of values.
            </summary>
            <typeparam name="T">The type of values to aggregate.</typeparam>
            <param name="f">The accumulator function.</param>
            <param name="val1">The first of four values to aggregate.</param>
            <param name="val2">The second of four values to aggregate.</param>
            <param name="val3">The third of four values to aggregate.</param>
            <param name="val4">The fourth of four values to aggregate.</param>
            <returns>The final aggregated value calculated as <c>f(f(f(val1, val2), val3), val4)</c>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Aggregate``1(System.Func{``0,``0,``0},``0,``0,``0,``0,``0)">
            <summary>
            Applies a specified accumulator function over a specified sequence of values.
            </summary>
            <typeparam name="T">The type of values to aggregate.</typeparam>
            <param name="f">The accumulator function.</param>
            <param name="val1">The first of five values to aggregate.</param>
            <param name="val2">The second of five values to aggregate.</param>
            <param name="val3">The third of five values to aggregate.</param>
            <param name="val4">The fourth of five values to aggregate.</param>
            <param name="val5">The fifth of five values to aggregate.</param>
            <returns>The final aggregated value calculated as <c>f(f(f(f(val1, val2), val3), val4), val5)</c>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Aggregate``1(System.Func{``0,``0,``0},``0,``0,``0,``0,``0,``0)">
            <summary>
            Applies a specified accumulator function over a specified sequence of values.
            </summary>
            <typeparam name="T">The type of values to aggregate.</typeparam>
            <param name="f">The accumulator function.</param>
            <param name="val1">The first of six values to aggregate.</param>
            <param name="val2">The second of six values to aggregate.</param>
            <param name="val3">The third of six values to aggregate.</param>
            <param name="val4">The fourth of six values to aggregate.</param>
            <param name="val5">The fifth of six values to aggregate.</param>
            <param name="val6">The sixth of six values to aggregate.</param>
            <returns>The final aggregated value calculated as <c>f(f(f(f(f(val1, val2), val3), val4), val5), val6)</c>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Aggregate``1(System.Func{``0,``0,``0},``0,``0,``0,``0,``0,``0,``0)">
            <summary>
            Applies a specified accumulator function over a specified sequence of values.
            </summary>
            <typeparam name="T">The type of values to aggregate.</typeparam>
            <param name="f">The accumulator function.</param>
            <param name="val1">The first of seven values to aggregate.</param>
            <param name="val2">The second of seven values to aggregate.</param>
            <param name="val3">The third of seven values to aggregate.</param>
            <param name="val4">The fourth of seven values to aggregate.</param>
            <param name="val5">The fifth of seven values to aggregate.</param>
            <param name="val6">The sixth of seven values to aggregate.</param>
            <param name="val7">The seventh of seven values to aggregate.</param>
            <returns>The final aggregated value calculated as <c>f(f(f(f(f(f(val1, val2), val3), val4), val5), val6), val7)</c>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Aggregate``1(System.Func{``0,``0,``0},``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>
            Applies a specified accumulator function over a specified sequence of values.
            </summary>
            <typeparam name="T">The type of values to aggregate.</typeparam>
            <param name="f">The accumulator function.</param>
            <param name="val1">The first of eight values to aggregate.</param>
            <param name="val2">The second of eight values to aggregate.</param>
            <param name="val3">The third of eight values to aggregate.</param>
            <param name="val4">The fourth of eight values to aggregate.</param>
            <param name="val5">The fifth of eight values to aggregate.</param>
            <param name="val6">The sixth of eight values to aggregate.</param>
            <param name="val7">The seventh of eight values to aggregate.</param>
            <param name="val8">The eighth of eight values to aggregate.</param>
            <returns>The final aggregated value calculated as <c>f(f(f(f(f(f(f(val1, val2), val3), val4), val5), val6), val7), val8)</c>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Aggregate``1(System.Func{``0,``0,``0},``0,``0,``0,``0,``0,``0,``0,``0,``0[])">
            <summary>
            Applies a specified accumulator function over a specified sequence of values.
            </summary>
            <remarks>
            To aggregate the values of any enumerable sequence,
            use <see cref="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})"/> method.
            </remarks>
            <typeparam name="T">The type of values to aggregate.</typeparam>
            <param name="f">The accumulator function.</param>
            <param name="val1">The first value to aggregate.</param>
            <param name="val2">The second value to aggregate.</param>
            <param name="val3">The third value to aggregate.</param>
            <param name="val4">The fourth value to aggregate.</param>
            <param name="val5">The fifth value to aggregate.</param>
            <param name="val6">The sixth value to aggregate.</param>
            <param name="val7">The seventh value to aggregate.</param>
            <param name="val8">The eighth value to aggregate.</param>
            <param name="rest">The rest of values to aggregate.</param>
            <returns>The final aggregated value calculated as <c>...f(f(f(f(f(f(f(f(val1, val2), val3), val4), val5), val6), val7), val8), ...)</c>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Identity``1(``0)">
            <summary>
            A pure function that returns a value of its single parameter, e.g. f(x) = x.
            </summary>
            <typeparam name="T">The type a function works with.</typeparam>
            <param name="x">The parameter.</param>
            <returns>The value of parameter <paramref name="x"/>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Default``1">
            <summary>
            A pure function that returns a default value of <typeparamref name="T"/>, e.g. f() = default(T).
            </summary>
            <typeparam name="T">The type a function works with.</typeparam>
            <returns>The default value of <typeparamref name="T"/>.</returns>
        </member>
        <member name="P:Gapotchenko.FX.Fn.Empty">
            <summary>
            Gets a delegate to a pure parameterless function that does nothing.
            </summary>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate(System.Action)">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <param name="action">The lambda function.</param>
            <returns>The lambda function specified by an <paramref name="action"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``1(System.Action{``0})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T">The type of the parameter of a lambda function.</typeparam>
            <param name="action">The lambda function.</param>
            <returns>The lambda function specified by an <paramref name="action"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``2(System.Action{``0,``1})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <param name="action">The lambda function.</param>
            <returns>The lambda function specified by an <paramref name="action"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``3(System.Action{``0,``1,``2})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda function.</typeparam>
            <param name="action">The lambda function.</param>
            <returns>The lambda function specified by an <paramref name="action"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``4(System.Action{``0,``1,``2,``3})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda function.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda function.</typeparam>
            <param name="action">The lambda function.</param>
            <returns>The lambda function specified by an <paramref name="action"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``5(System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda function.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda function.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda function.</typeparam>
            <param name="action">The lambda function.</param>
            <returns>The lambda function specified by an <paramref name="action"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``6(System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda function.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda function.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda function.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda function.</typeparam>
            <param name="action">The lambda function.</param>
            <returns>The lambda function specified by an <paramref name="action"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``7(System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda function.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda function.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda function.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda function.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda function.</typeparam>
            <param name="action">The lambda function.</param>
            <returns>The lambda function specified by an <paramref name="action"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda function.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda function.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda function.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda function.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda function.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda function.</typeparam>
            <param name="action">The lambda function.</param>
            <returns>The lambda function specified by an <paramref name="action"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda function.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda function.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda function.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda function.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda function.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda function.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda function.</typeparam>
            <param name="action">The lambda function.</param>
            <returns>The lambda function specified by an <paramref name="action"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda function.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda function.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda function.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda function.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda function.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda function.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda function.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of a lambda function.</typeparam>
            <param name="action">The lambda function.</param>
            <returns>The lambda function specified by an <paramref name="action"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda function.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda function.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda function.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda function.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda function.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda function.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda function.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of a lambda function.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of a lambda function.</typeparam>
            <param name="action">The lambda function.</param>
            <returns>The lambda function specified by an <paramref name="action"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda function.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda function.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda function.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda function.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda function.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda function.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda function.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of a lambda function.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of a lambda function.</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of a lambda function.</typeparam>
            <param name="action">The lambda function.</param>
            <returns>The lambda function specified by an <paramref name="action"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda function.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda function.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda function.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda function.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda function.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda function.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda function.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of a lambda function.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of a lambda function.</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of a lambda function.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of a lambda function.</typeparam>
            <param name="action">The lambda function.</param>
            <returns>The lambda function specified by an <paramref name="action"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda function.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda function.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda function.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda function.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda function.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda function.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda function.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of a lambda function.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of a lambda function.</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of a lambda function.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of a lambda function.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of a lambda function.</typeparam>
            <param name="action">The lambda function.</param>
            <returns>The lambda function specified by an <paramref name="action"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda function.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda function.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda function.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda function.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda function.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda function.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda function.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of a lambda function.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of a lambda function.</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of a lambda function.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of a lambda function.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of a lambda function.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of a lambda function.</typeparam>
            <param name="action">The lambda function.</param>
            <returns>The lambda function specified by an <paramref name="action"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda function.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda function.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda function.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda function.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda function.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda function.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda function.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of a lambda function.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of a lambda function.</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of a lambda function.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of a lambda function.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of a lambda function.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of a lambda function.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of a lambda function.</typeparam>
            <param name="action">The lambda function.</param>
            <returns>The lambda function specified by an <paramref name="action"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``1(System.Func{``0})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="TResult">The type of the result of a lambda function.</typeparam>
            <param name="func">The lambda function.</param>
            <returns>The lambda function specified by a <paramref name="func"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``2(System.Func{``0,``1})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T">The type of the parameter of a lambda function.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda function.</typeparam>
            <param name="func">The lambda function.</param>
            <returns>The lambda function specified by a <paramref name="func"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``3(System.Func{``0,``1,``2})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda function.</typeparam>
            <param name="func">The lambda function.</param>
            <returns>The lambda function specified by a <paramref name="func"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda function.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda function.</typeparam>
            <param name="func">The lambda function.</param>
            <returns>The lambda function specified by a <paramref name="func"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda function.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda function.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda function.</typeparam>
            <param name="func">The lambda function.</param>
            <returns>The lambda function specified by a <paramref name="func"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda function.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda function.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda function.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda function.</typeparam>
            <param name="func">The lambda function.</param>
            <returns>The lambda function specified by a <paramref name="func"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda function.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda function.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda function.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda function.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda function.</typeparam>
            <param name="func">The lambda function.</param>
            <returns>The lambda function specified by a <paramref name="func"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda function.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda function.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda function.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda function.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda function.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda function.</typeparam>
            <param name="func">The lambda function.</param>
            <returns>The lambda function specified by a <paramref name="func"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda function.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda function.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda function.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda function.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda function.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda function.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda function.</typeparam>
            <param name="func">The lambda function.</param>
            <returns>The lambda function specified by a <paramref name="func"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda function.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda function.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda function.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda function.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda function.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda function.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda function.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda function.</typeparam>
            <param name="func">The lambda function.</param>
            <returns>The lambda function specified by a <paramref name="func"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda function.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda function.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda function.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda function.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda function.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda function.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda function.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of a lambda function.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda function.</typeparam>
            <param name="func">The lambda function.</param>
            <returns>The lambda function specified by a <paramref name="func"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda function.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda function.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda function.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda function.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda function.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda function.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda function.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of a lambda function.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of a lambda function.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda function.</typeparam>
            <param name="func">The lambda function.</param>
            <returns>The lambda function specified by a <paramref name="func"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda function.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda function.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda function.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda function.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda function.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda function.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda function.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of a lambda function.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of a lambda function.</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of a lambda function.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda function.</typeparam>
            <param name="func">The lambda function.</param>
            <returns>The lambda function specified by a <paramref name="func"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda function.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda function.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda function.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda function.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda function.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda function.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda function.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of a lambda function.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of a lambda function.</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of a lambda function.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of a lambda function.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda function.</typeparam>
            <param name="func">The lambda function.</param>
            <returns>The lambda function specified by a <paramref name="func"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda function.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda function.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda function.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda function.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda function.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda function.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda function.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of a lambda function.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of a lambda function.</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of a lambda function.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of a lambda function.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of a lambda function.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda function.</typeparam>
            <param name="func">The lambda function.</param>
            <returns>The lambda function specified by a <paramref name="func"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda function.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda function.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda function.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda function.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda function.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda function.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda function.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of a lambda function.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of a lambda function.</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of a lambda function.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of a lambda function.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of a lambda function.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of a lambda function.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda function.</typeparam>
            <param name="func">The lambda function.</param>
            <returns>The lambda function specified by a <paramref name="func"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Delegate``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>
            Infers the delegate type of a specified lambda function.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda function.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda function.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda function.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda function.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda function.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda function.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda function.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda function.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda function.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of a lambda function.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of a lambda function.</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of a lambda function.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of a lambda function.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of a lambda function.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of a lambda function.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of a lambda function.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda function.</typeparam>
            <param name="func">The lambda function.</param>
            <returns>The lambda function specified by a <paramref name="func"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T">The type of the parameter of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``2(System.Linq.Expressions.Expression{System.Action{``0,``1}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``3(System.Linq.Expressions.Expression{System.Action{``0,``1,``2}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``4(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda expression.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``5(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda expression.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda expression.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``6(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda expression.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda expression.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda expression.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``7(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda expression.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda expression.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda expression.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda expression.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``8(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda expression.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda expression.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda expression.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda expression.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda expression.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``9(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda expression.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda expression.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda expression.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda expression.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda expression.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda expression.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``10(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda expression.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda expression.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda expression.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda expression.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda expression.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda expression.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda expression.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``11(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda expression.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda expression.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda expression.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda expression.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda expression.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda expression.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda expression.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of a lambda expression.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``12(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda expression.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda expression.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda expression.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda expression.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda expression.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda expression.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda expression.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of a lambda expression.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of a lambda expression.</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``13(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda expression.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda expression.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda expression.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda expression.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda expression.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda expression.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda expression.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of a lambda expression.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of a lambda expression.</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of a lambda expression.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``14(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda expression.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda expression.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda expression.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda expression.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda expression.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda expression.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda expression.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of a lambda expression.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of a lambda expression.</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of a lambda expression.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of a lambda expression.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``15(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda expression.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda expression.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda expression.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda expression.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda expression.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda expression.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda expression.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of a lambda expression.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of a lambda expression.</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of a lambda expression.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of a lambda expression.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of a lambda expression.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``16(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda expression.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda expression.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda expression.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda expression.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda expression.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda expression.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda expression.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of a lambda expression.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of a lambda expression.</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of a lambda expression.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of a lambda expression.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of a lambda expression.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of a lambda expression.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="TResult">The type of the result of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T">The type of the parameter of a lambda expression.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda expression.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda expression.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda expression.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda expression.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda expression.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda expression.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda expression.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda expression.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda expression.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda expression.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda expression.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda expression.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda expression.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda expression.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda expression.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda expression.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda expression.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda expression.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda expression.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda expression.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda expression.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda expression.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda expression.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda expression.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda expression.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda expression.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda expression.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda expression.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda expression.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda expression.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda expression.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda expression.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda expression.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda expression.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda expression.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of a lambda expression.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda expression.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda expression.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda expression.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda expression.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda expression.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda expression.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda expression.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of a lambda expression.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of a lambda expression.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda expression.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda expression.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda expression.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda expression.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda expression.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda expression.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda expression.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of a lambda expression.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of a lambda expression.</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of a lambda expression.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda expression.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda expression.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda expression.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda expression.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda expression.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda expression.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda expression.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of a lambda expression.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of a lambda expression.</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of a lambda expression.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of a lambda expression.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda expression.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda expression.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda expression.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda expression.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda expression.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda expression.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda expression.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of a lambda expression.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of a lambda expression.</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of a lambda expression.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of a lambda expression.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of a lambda expression.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda expression.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda expression.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda expression.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda expression.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda expression.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda expression.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda expression.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of a lambda expression.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of a lambda expression.</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of a lambda expression.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of a lambda expression.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of a lambda expression.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of a lambda expression.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Fn.Expression``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})">
            <summary>
            Infers the type of a specified lambda expression.
            </summary>
            <typeparam name="T1">The type of the first parameter of a lambda expression.</typeparam>
            <typeparam name="T2">The type of the second parameter of a lambda expression.</typeparam>
            <typeparam name="T3">The type of the third parameter of a lambda expression.</typeparam>
            <typeparam name="T4">The type of the fourth parameter of a lambda expression.</typeparam>
            <typeparam name="T5">The type of the fifth parameter of a lambda expression.</typeparam>
            <typeparam name="T6">The type of the sixth parameter of a lambda expression.</typeparam>
            <typeparam name="T7">The type of the seventh parameter of a lambda expression.</typeparam>
            <typeparam name="T8">The type of the eighth parameter of a lambda expression.</typeparam>
            <typeparam name="T9">The type of the ninth parameter of a lambda expression.</typeparam>
            <typeparam name="T10">The type of the tenth parameter of a lambda expression.</typeparam>
            <typeparam name="T11">The type of the eleventh parameter of a lambda expression.</typeparam>
            <typeparam name="T12">The type of the twelveth parameter of a lambda expression.</typeparam>
            <typeparam name="T13">The type of the thirteenth parameter of a lambda expression.</typeparam>
            <typeparam name="T14">The type of the fourteenth parameter of a lambda expression.</typeparam>
            <typeparam name="T15">The type of the fifteenth parameter of a lambda expression.</typeparam>
            <typeparam name="T16">The type of the sixteenth parameter of a lambda expression.</typeparam>
            <typeparam name="TResult">The type of the result of a lambda expression.</typeparam>
            <param name="expression">The lambda expression.</param>
            <returns>The lambda expression specified by an <paramref name="expression"/> parameter.</returns>
        </member>
        <member name="T:Gapotchenko.FX.Fn`1">
            <summary>
            Provides lambda calculus and functional composition primitives for type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to provide lambda calculus and functional composition primitives for.</typeparam>
        </member>
        <member name="P:Gapotchenko.FX.Fn`1.Default">
            <summary>
            Gets a delegate to a pure function that returns a default value of type <typeparamref name="T"/>, e.g. f() = default(T).
            </summary>
        </member>
        <member name="P:Gapotchenko.FX.Fn`1.Identity">
            <summary>
            Gets a delegate to a pure identity function that returns a value of its single argument, e.g. f(x) = x.
            </summary>
        </member>
        <member name="T:Gapotchenko.FX.HashCodeEx">
            <summary>
            Provides extended functionality for building, combining and diffusing hash codes.
            </summary>
        </member>
        <member name="M:Gapotchenko.FX.HashCodeEx.SequenceCombine``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Combines hash codes of the elements of a specified sequence.
            </summary>
            <typeparam name="T">The sequence element type.</typeparam>
            <param name="source">The sequence of elements. The sequence itself can be <c>null</c>, and it can contain elements that are <c>null</c>.</param>
            <returns>The combined hash code.</returns>
        </member>
        <member name="M:Gapotchenko.FX.HashCodeEx.SequenceCombine``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Combines hash codes of the elements of a specified sequence by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="T">The sequence element type.</typeparam>
            <param name="source">The sequence of elements. The sequence itself can be <c>null</c>, and it can contain elements that are <c>null</c>.</param>
            <param name="comparer">The equality comparer to get element hash codes from.</param>
            <returns>The combined hash code.</returns>
        </member>
        <member name="M:Gapotchenko.FX.HashCodeEx.AddRange``1(System.HashCode@,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds hash codes of the elements of a specified sequence to this instance.
            </summary>
            <typeparam name="T">The sequence element type.</typeparam>
            <param name="hashCode">The hash code.</param>
            <param name="source">The sequence of elements. The sequence itself can be <c>null</c>, and it can contain elements that are <c>null</c>.</param>
            <returns>The combined hash code.</returns>
        </member>
        <member name="M:Gapotchenko.FX.HashCodeEx.AddRange``1(System.HashCode@,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Adds hash codes of the elements of a specified sequence to this instance by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="T">The sequence element type.</typeparam>
            <param name="hashCode">The hash code.</param>
            <param name="source">The sequence of elements. The sequence itself can be <c>null</c>, and it can contain elements that are <c>null</c>.</param>
            <param name="comparer">The equality comparer to get element hash codes from.</param>
            <returns>The combined hash code.</returns>
        </member>
        <member name="T:Gapotchenko.FX.IBitConverter">
            <summary>
            Defines interface of a byte order converter.
            </summary>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.GetBytes(System.Int16)">
            <summary>
            Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.GetBytes(System.UInt16)">
            <summary>
            Returns the specified 16-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.GetBytes(System.Int32)">
            <summary>
            Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.GetBytes(System.UInt32)">
            <summary>
            Returns the specified 32-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.GetBytes(System.Int64)">
            <summary>
            Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.GetBytes(System.UInt64)">
            <summary>
            Returns the specified 64-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.GetBytes(System.Single)">
            <summary>
            Returns the specified single-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.GetBytes(System.Double)">
            <summary>
            Returns the specified double-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.GetBytes(System.Decimal)">
            <summary>
            Returns the specified decimal value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 16.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.GetBytes(System.Boolean)">
            <summary>
            Returns the specified <see cref="T:System.Boolean"/> value as an array of bytes.
            </summary>
            <param name="value">A <see cref="T:System.Boolean"/> value.</param>
            <returns>An array of bytes with length 1.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.FillBytes(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Fills the array with two bytes of the specified 16-bit signed integer value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is to be stored at <paramref name="buffer"/>.</param>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.FillBytes(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            Fills the array with two bytes of the specified 16-bit unsigned integer value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is to be stored at <paramref name="buffer"/>.</param>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.FillBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Fills the array with four bytes of the specified 32-bit signed integer value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is be stored.</param>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.FillBytes(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Fills the array with four bytes of the specified 32-bit unsigned integer value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is to be stored at <paramref name="buffer"/>.</param>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.FillBytes(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Fills the array with eight bytes of the specified 64-bit signed integer value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is to be stored at <paramref name="buffer"/>.</param>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.FillBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Fills the array with eight bytes of the specified 64-bit unsigned integer value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is to be stored at <paramref name="buffer"/>.</param>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.FillBytes(System.Single,System.Byte[],System.Int32)">
            <summary>
            Fills the array with four bytes of the specified single-precision floating point value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is to be stored at <paramref name="buffer"/>.</param>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.FillBytes(System.Double,System.Byte[],System.Int32)">
            <summary>
            Fills the array with eight bytes of the specified double-precision floating point value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is to be stored at <paramref name="buffer"/>.</param>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.FillBytes(System.Decimal,System.Byte[],System.Int32)">
            <summary>
            Fills the array with sixteen bytes of the specified decimal value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is to be stored at <paramref name="buffer"/>.</param>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.FillBytes(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Fills the array with one byte of the specified <see cref="T:System.Boolean"/> value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">A <see cref="T:System.Boolean"/> value.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is to be stored at <paramref name="buffer"/>.</param>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.FillBytes(System.Int16,System.Byte[])">
            <summary>
            Fills the array with two bytes of the specified 16-bit signed integer value.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.FillBytes(System.UInt16,System.Byte[])">
            <summary>
            Fills the array with two bytes of the specified 16-bit unsigned integer value.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.FillBytes(System.Int32,System.Byte[])">
            <summary>
            Fills the array with four bytes of the specified 32-bit signed integer value.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.FillBytes(System.UInt32,System.Byte[])">
            <summary>
            Fills the array with four bytes of the specified 32-bit unsigned integer value.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.FillBytes(System.Int64,System.Byte[])">
            <summary>
            Fills the array with eight bytes of the specified 64-bit signed integer value.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.FillBytes(System.UInt64,System.Byte[])">
            <summary>
            Fills the array with eight bytes of the specified 64-bit unsigned integer value.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.FillBytes(System.Single,System.Byte[])">
            <summary>
            Fills the array with four bytes of the specified single-precision floating point value.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.FillBytes(System.Double,System.Byte[])">
            <summary>
            Fills the array with eight bytes of the specified double-precision floating point value.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.FillBytes(System.Decimal,System.Byte[])">
            <summary>
            Fills the array with sixteen bytes of the specified decimal value.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.FillBytes(System.Boolean,System.Byte[])">
            <summary>
            Fills the array with one byte of the specified <see cref="T:System.Boolean"/> value beginning.
            </summary>
            <param name="value">A <see cref="T:System.Boolean"/> value.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit signed integer formed by two bytes beginning at <paramref name="startIndex"/>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit unsigned integer formed by two bytes beginning at <paramref name="startIndex"/>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 32-bit signed integer formed by four bytes beginning at <paramref name="startIndex"/>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 32-bit unsigned integer formed by four bytes beginning at <paramref name="startIndex"/>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit signed integer formed by eight bytes beginning at <paramref name="startIndex"/>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit unsigned integer formed by eight bytes beginning at <paramref name="startIndex"/>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.ToSingle(System.Byte[],System.Int32)">
            <summary>
            Returns a single-precision floating point number converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A single-precision floating point number formed by four bytes beginning at <paramref name="startIndex"/>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.ToDouble(System.Byte[],System.Int32)">
            <summary>
            Returns a double-precision floating point number converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A double-precision floating point number formed by eight bytes beginning at <paramref name="startIndex"/>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.ToDecimal(System.Byte[],System.Int32)">
            <summary>
            Returns a decimal number converted from sixteen bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A decimal number formed by sixteen bytes beginning at <paramref name="startIndex"/>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.ToBoolean(System.Byte[],System.Int32)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value converted from one byte at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns><c>true</c> if the byte at startIndex in value is nonzero; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.ToInt16(System.Byte[])">
            <summary>
            Returns a 16-bit signed integer converted from the first two bytes of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A 16-bit signed integer formed by the first two bytes of a byte array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.ToUInt16(System.Byte[])">
            <summary>
            Returns a 16-bit unsigned integer converted from the first two bytes of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A 16-bit unsigned integer formed by the first two bytes of a byte array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.ToInt32(System.Byte[])">
            <summary>
            Returns a 32-bit signed integer converted from the first four bytes of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A 32-bit signed integer formed by the first four bytes of a byte array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.ToUInt32(System.Byte[])">
            <summary>
            Returns a 32-bit unsigned integer converted from the first four bytes of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A 32-bit unsigned integer formed by the first four bytes of a byte array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.ToInt64(System.Byte[])">
            <summary>
            Returns a 64-bit signed integer converted from the first eight bytes of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A 64-bit signed integer formed by the first eight bytes of a byte array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.ToUInt64(System.Byte[])">
            <summary>
            Returns a 64-bit unsigned integer converted from the first eight bytes of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A 64-bit unsigned integer formed by the first eight bytes of a byte array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.ToSingle(System.Byte[])">
            <summary>
            Returns a single-precision floating point number converted from four bytes of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A single-precision floating point number formed by four bytes of a byte array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.ToDouble(System.Byte[])">
            <summary>
            Returns a double-precision floating point number converted from eight bytes of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A double-precision floating point number formed by eight bytes of a byte array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.ToDecimal(System.Byte[])">
            <summary>
            Returns a decimal number converted from sixteen bytes of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A decimal number formed by sixteen of a byte array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.IBitConverter.ToBoolean(System.Byte[])">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value converted from the first byte of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns><c>true</c> if the first byte of a byte array is nonzero; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Gapotchenko.FX.IControlFlowException">
            <summary>
            Marks derived exception as the one affecting a program's control flow.
            </summary>
        </member>
        <member name="T:Gapotchenko.FX.Lazy">
            <summary>
            Provides static methods for creating <see cref="T:System.Lazy`1"/> objects.
            </summary>
        </member>
        <member name="M:Gapotchenko.FX.Lazy.Create``1">
            <summary>
            Creates a new instance of the <see cref="T:System.Lazy`1"/> class.
            When lazy initialization occurs, the default constructor of the target type <typeparamref name="T"/> is used.
            </summary>
            <typeparam name="T">Specifies the type of object that is being lazily initialized.</typeparam>
            <returns>New <see cref="T:System.Lazy`1"/> instance.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Lazy.Create``1(System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:System.Lazy`1"/> class.
            When lazy initialization occurs, the default constructor of the target type <typeparamref name="T"/> is used.
            </summary>
            <typeparam name="T">Specifies the type of object that is being lazily initialized.</typeparam>
            <param name="isThreadSafe">
            <c>true</c> to make this instance usable concurrently by multiple threads;
            <c>false</c> to make the instance usable by only one thread at a time.
            </param>
            <returns>New <see cref="T:System.Lazy`1"/> instance.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Lazy.Create``1(System.Threading.LazyThreadSafetyMode)">
            <summary>
            Creates a new instance of the <see cref="T:System.Lazy`1"/> class.
            When lazy initialization occurs, the default constructor of the target type <typeparamref name="T"/> is used.
            </summary>
            <typeparam name="T">Specifies the type of object that is being lazily initialized.</typeparam>
            <param name="mode">One of the enumeration values that specifies the thread safety mode.</param>
            <returns>New <see cref="T:System.Lazy`1"/> instance.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Lazy.Create``1(System.Func{``0})">
            <summary>
            Creates a new instance of the <see cref="T:System.Lazy`1"/> class.
            When lazy initialization occurs, the specified initialization function is used.
            </summary>
            <typeparam name="T">Specifies the type of object that is being lazily initialized.</typeparam>
            <param name="valueFactory">The delegate that is invoked to produce the lazily initialized value when it is needed.</param>
            <returns>New <see cref="T:System.Lazy`1"/> instance.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Lazy.Create``1(System.Func{``0},System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:System.Lazy`1"/> class.
            When lazy initialization occurs, the specified initialization function is used.
            </summary>
            <typeparam name="T">Specifies the type of object that is being lazily initialized.</typeparam>
            <param name="valueFactory">The delegate that is invoked to produce the lazily initialized value when it is needed.</param>
            <param name="isThreadSafe">
            <c>true</c> to make this instance usable concurrently by multiple threads;
            <c>false</c> to make the instance usable by only one thread at a time.
            </param>
            <returns>New <see cref="T:System.Lazy`1"/> instance.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Lazy.Create``1(System.Func{``0},System.Threading.LazyThreadSafetyMode)">
            <summary>
            Creates a new instance of the <see cref="T:System.Lazy`1"/> class.
            When lazy initialization occurs, the specified initialization function is used.
            </summary>
            <typeparam name="T">Specifies the type of object that is being lazily initialized.</typeparam>
            <param name="valueFactory">The delegate that is invoked to produce the lazily initialized value when it is needed.</param>
            <param name="mode">One of the enumeration values that specifies the thread safety mode.</param>
            <returns>New <see cref="T:System.Lazy`1"/> instance.</returns>
        </member>
        <member name="T:Gapotchenko.FX.LazyEvaluation">
            <summary>
            Provides static methods for creating <see cref="T:Gapotchenko.FX.LazyEvaluation`1"/> values.
            </summary>
        </member>
        <member name="M:Gapotchenko.FX.LazyEvaluation.Create``1">
            <summary>
            Creates a new instance of the <see cref="T:Gapotchenko.FX.LazyEvaluation`1"/> struct.
            When lazy evaluation occurs, the default constructor of the target type <typeparamref name="T"/> is used.
            </summary>
            <typeparam name="T">Specifies the type of object that is being lazily evaluated.</typeparam>
            <returns>New <see cref="T:Gapotchenko.FX.LazyEvaluation`1"/> instance.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LazyEvaluation.Create``1(System.Func{``0})">
            <summary>
            Creates a new instance of the <see cref="T:Gapotchenko.FX.LazyEvaluation`1"/> struct.
            </summary>
            <typeparam name="T">Specifies the type of object that is being lazily evaluated.</typeparam>
            <param name="valueFactory">The value factory that is invoked to produce a lazily evaluated value when it is needed.</param>
            <returns>New <see cref="T:Gapotchenko.FX.LazyEvaluation`1"/> instance.</returns>
        </member>
        <member name="T:Gapotchenko.FX.LazyEvaluation`1">
            <summary>
            Provides an evaluation strategy which delays the evaluation of an expression until its value is needed.
            </summary>
            <typeparam name="T">Specifies the type of object that is being lazily evaluated.</typeparam>
            <remarks>
            <para>
            <see cref="T:Gapotchenko.FX.LazyEvaluation`1"/> is a better alternative to <see cref="T:System.Lazy`1"/> when the evaluated value is located at a local variable.
            </para>
            <para>
            <see cref="T:Gapotchenko.FX.LazyEvaluation`1"/> is not thread-safe.
            For thread-safe lazy evaluation, please use <see cref="T:Gapotchenko.FX.Threading.EvaluateOnce`1"/> struct.
            </para>
            </remarks>
        </member>
        <member name="M:Gapotchenko.FX.LazyEvaluation`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Gapotchenko.FX.LazyEvaluation`1"/> struct.
            </summary>
            <param name="valueFactory">The value factory that is invoked to produce a lazily evaluated value when it is needed.</param>
        </member>
        <member name="P:Gapotchenko.FX.LazyEvaluation`1.Value">
            <summary>
            Gets the lazily evaluated value of the current <see cref="T:Gapotchenko.FX.LazyEvaluation`1"/> instance.
            </summary>
        </member>
        <member name="P:Gapotchenko.FX.LazyEvaluation`1.IsValueCreated">
            <summary>
            Gets a value that indicates whether a value has been created for this <see cref="T:Gapotchenko.FX.LazyEvaluation`1"/> instance.
            </summary>
        </member>
        <member name="M:Gapotchenko.FX.LazyEvaluation`1.ToString">
            <summary>
            Creates and returns a string representation of the <see cref="P:Gapotchenko.FX.LazyEvaluation`1.Value"/> property for this instance.
            </summary>
            <returns>
            The result of calling the <see cref="M:System.Object.ToString"/> method on the <see cref="P:Gapotchenko.FX.LazyEvaluation`1.Value"/> property for this instance,
            if the value has been created (that is, if the <see cref="P:Gapotchenko.FX.LazyEvaluation`1.IsValueCreated"/> property returns <c>true</c>).
            Otherwise, a string indicating that the value has not been created.
            </returns>
        </member>
        <member name="T:Gapotchenko.FX.LazyExecution">
            <summary>
            Provides a strategy which delays the execution of an action until its explicitly asserted with <see cref="M:Gapotchenko.FX.LazyExecution.EnsureExecuted"/> method.
            </summary>
            <remarks>
            <see cref="T:Gapotchenko.FX.LazyExecution"/> is not thread-safe.
            For thread-safe lazy execution, please use <see cref="T:Gapotchenko.FX.Threading.ExecuteOnce"/> struct.
            </remarks>
        </member>
        <member name="M:Gapotchenko.FX.LazyExecution.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Gapotchenko.FX.LazyExecution"/> struct.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Gapotchenko.FX.LazyExecution.EnsureExecuted">
            <summary>
            Ensures that the action was executed.
            </summary>
        </member>
        <member name="P:Gapotchenko.FX.LazyExecution.IsExecuted">
            <summary>
            Gets a value indicating whether the action was executed.
            </summary>
        </member>
        <member name="T:Gapotchenko.FX.LittleEndianBitConverter">
            <summary>
            Converts base data types to an array of bytes, and an array of bytes to base data types in little-endian byte order.
            </summary>
            <remarks>
            <seealso cref="T:Gapotchenko.FX.BigEndianBitConverter"/>
            </remarks>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.GetBytes(System.Int32)">
            <summary>
            Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.FillBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Fills the array with four bytes of the specified 32-bit signed integer value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is be stored.</param>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.FillBytes(System.Int32,System.Byte[])">
            <summary>
            Fills the array with four bytes of the specified 32-bit signed integer value.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.GetBytes(System.UInt32)">
            <summary>
            Returns the specified 32-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.FillBytes(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Fills the array with four bytes of the specified 32-bit unsigned integer value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is to be stored at <paramref name="buffer"/>.</param>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.FillBytes(System.UInt32,System.Byte[])">
            <summary>
            Fills the array with four bytes of the specified 32-bit unsigned integer value.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.GetBytes(System.Int16)">
            <summary>
            Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.FillBytes(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Fills the array with two bytes of the specified 16-bit signed integer value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is to be stored at <paramref name="buffer"/>.</param>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.FillBytes(System.Int16,System.Byte[])">
            <summary>
            Fills the array with two bytes of the specified 16-bit signed integer value.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.GetBytes(System.UInt16)">
            <summary>
            Returns the specified 16-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.FillBytes(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            Fills the array with two bytes of the specified 16-bit unsigned integer value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is to be stored at <paramref name="buffer"/>.</param>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.FillBytes(System.UInt16,System.Byte[])">
            <summary>
            Fills the array with two bytes of the specified 16-bit unsigned integer value.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.GetBytes(System.Int64)">
            <summary>
            Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.FillBytes(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Fills the array with eight bytes of the specified 64-bit signed integer value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is to be stored at <paramref name="buffer"/>.</param>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.FillBytes(System.Int64,System.Byte[])">
            <summary>
            Fills the array with eight bytes of the specified 64-bit signed integer value.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.GetBytes(System.UInt64)">
            <summary>
            Returns the specified 64-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.FillBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Fills the array with eight bytes of the specified 64-bit unsigned integer value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is to be stored at <paramref name="buffer"/>.</param>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.FillBytes(System.UInt64,System.Byte[])">
            <summary>
            Fills the array with eight bytes of the specified 64-bit unsigned integer value.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.GetBytes(System.Single)">
            <summary>
            Returns the specified single-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.FillBytes(System.Single,System.Byte[],System.Int32)">
            <summary>
            Fills the array with four bytes of the specified single-precision floating point value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is to be stored at <paramref name="buffer"/>.</param>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.FillBytes(System.Single,System.Byte[])">
            <summary>
            Fills the array with four bytes of the specified single-precision floating point value.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.GetBytes(System.Double)">
            <summary>
            Returns the specified double-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.FillBytes(System.Double,System.Byte[],System.Int32)">
            <summary>
            Fills the array with eight bytes of the specified double-precision floating point value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is to be stored at <paramref name="buffer"/>.</param>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.FillBytes(System.Double,System.Byte[])">
            <summary>
            Fills the array with eight bytes of the specified double-precision floating point value.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.GetBytes(System.Decimal)">
            <summary>
            Returns the specified decimal value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 16.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.FillBytes(System.Decimal,System.Byte[],System.Int32)">
            <summary>
            Fills the array with sixteen bytes of the specified decimal value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is to be stored at <paramref name="buffer"/>.</param>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.FillBytes(System.Decimal,System.Byte[])">
            <summary>
            Fills the array with sixteen bytes of the specified decimal value.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.GetBytes(System.Boolean)">
            <summary>
            Returns the specified <see cref="T:System.Boolean"/> value as an array of bytes.
            </summary>
            <param name="value">A <see cref="T:System.Boolean"/> value.</param>
            <returns>An array of bytes with length 1.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.FillBytes(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Fills the array with one byte of the specified <see cref="T:System.Boolean"/> value beginning at <paramref name="startIndex"/>.
            </summary>
            <param name="value">A <see cref="T:System.Boolean"/> value.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
            <param name="startIndex">The start index where converted value is to be stored at <paramref name="buffer"/>.</param>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.FillBytes(System.Boolean,System.Byte[])">
            <summary>
            Fills the array with one byte of the specified <see cref="T:System.Boolean"/> value beginning.
            </summary>
            <param name="value">A <see cref="T:System.Boolean"/> value.</param>
            <param name="buffer">The array of bytes to store converted value at.</param>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 32-bit signed integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.ToInt32(System.Byte[])">
            <summary>
            Returns a 32-bit signed integer converted from the first four bytes of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A 32-bit signed integer formed by the first four bytes of a byte array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 32-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.ToUInt32(System.Byte[])">
            <summary>
            Returns a 32-bit unsigned integer converted from the first four bytes of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A 32-bit unsigned integer formed by the first four bytes of a byte array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.ToInt16(System.Byte[])">
            <summary>
            Returns a 16-bit signed integer converted from the first two bytes of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A 16-bit signed integer formed by the first two bytes of a byte array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.ToUInt16(System.Byte[])">
            <summary>
            Returns a 16-bit unsigned integer converted from the first two bytes of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A 16-bit unsigned integer formed by the first two bytes of a byte array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.ToInt64(System.Byte[])">
            <summary>
            Returns a 64-bit signed integer converted from the first eight bytes of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A 64-bit signed integer formed by the first eight bytes of a byte array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit unsigned integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.ToUInt64(System.Byte[])">
            <summary>
            Returns a 64-bit unsigned integer converted from the first eight bytes of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A 64-bit unsigned integer formed by the first eight bytes of a byte array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.ToSingle(System.Byte[],System.Int32)">
            <summary>
            Returns a single-precision floating point number converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A single-precision floating point number formed by four bytes beginning at <paramref name="startIndex"/>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.ToSingle(System.Byte[])">
            <summary>
            Returns a single-precision floating point number converted from four bytes of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A single-precision floating point number formed by four bytes of a byte array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.ToDouble(System.Byte[],System.Int32)">
            <summary>
            Returns a double-precision floating point number converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A double-precision floating point number formed by eight bytes beginning at <paramref name="startIndex"/>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.ToDouble(System.Byte[])">
            <summary>
            Returns a double-precision floating point number converted from eight bytes of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A double-precision floating point number formed by eight bytes of a byte array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.ToDecimal(System.Byte[],System.Int32)">
            <summary>
            Returns a decimal number converted from sixteen bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A decimal number formed by sixteen bytes beginning at <paramref name="startIndex"/>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.ToDecimal(System.Byte[])">
            <summary>
            Returns a decimal number converted from sixteen bytes of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A decimal number formed by sixteen of a byte array.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.ToBoolean(System.Byte[],System.Int32)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> value converted from one byte at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns><c>true</c> if the byte at startIndex in value is nonzero; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.LittleEndianBitConverter.ToBoolean(System.Byte[])">
            <summary>
            Returns a Boolean value converted from the first byte of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns><c>true</c> if the first byte of a byte array is nonzero; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Gapotchenko.FX.LittleEndianBitConverter.Instance">
            <summary>
            Returns a default bit converter instance for little-endian byte order.
            </summary>
        </member>
        <member name="T:Gapotchenko.FX.Optional">
            <summary>
            Supports an optional value represented by <see cref="T:Gapotchenko.FX.Optional`1"/> type.
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Gapotchenko.FX.Optional.Some``1(``0)">
            <summary>
            <para>
            Creates a new <see cref="T:Gapotchenko.FX.Optional`1"/> object initialized to a specified value.
            </para>
            <para>
            Use <seealso cref="P:Gapotchenko.FX.Optional`1.None"/> property to get an <see cref="T:Gapotchenko.FX.Optional`1"/> object without a value.
            </para>
            </summary>
            <typeparam name="T">The underlying type of the <see cref="T:Gapotchenko.FX.Optional`1"/> generic type.</typeparam>
            <param name="value">A value.</param>
            <returns>
            A <see cref="T:Gapotchenko.FX.Optional`1"/> object whose <see cref="P:Gapotchenko.FX.Optional`1.Value"/> property is initialized with the value parameter.
            </returns>
        </member>
        <member name="M:Gapotchenko.FX.Optional.Equals``1(Gapotchenko.FX.Optional{``0},Gapotchenko.FX.Optional{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether the specified optional values are equal.
            </summary>
            <typeparam name="T">The underlying type of the <see cref="T:Gapotchenko.FX.Optional`1"/> generic type.</typeparam>
            <param name="x">The first optional value to compare.</param>
            <param name="y">The second optional value to compare.</param>
            <param name="valueComparer">The value equality comparer.</param>
            <returns><c>true</c> if the specified objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Optional.Equals``1(Gapotchenko.FX.Optional{``0},Gapotchenko.FX.Optional{``0})">
            <summary>
            Determines whether the specified optional values are equal.
            </summary>
            <typeparam name="T">The underlying type of the <see cref="T:Gapotchenko.FX.Optional`1"/> generic type.</typeparam>
            <param name="x">The first optional value to compare.</param>
            <param name="y">The second optional value to compare.</param>
            <returns><c>true</c> if the specified objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Optional.GetHashCode``1(Gapotchenko.FX.Optional{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns a hash code for the specified optional value.
            </summary>
            <typeparam name="T">The underlying type of the <see cref="T:Gapotchenko.FX.Optional`1"/> generic type.</typeparam>
            <param name="option">The optional value.</param>
            <param name="valueComparer">The value equality comparer.</param>
            <returns>A hash code for the specified optional value.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Optional.GetHashCode``1(Gapotchenko.FX.Optional{``0})">
            <summary>
            Returns a hash code for the specified optional value.
            </summary>
            <typeparam name="T">The underlying type of the <see cref="T:Gapotchenko.FX.Optional`1"/> generic type.</typeparam>
            <param name="option">The optional value.</param>
            <returns>A hash code for the specified optional value.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Optional.Compare``1(Gapotchenko.FX.Optional{``0},Gapotchenko.FX.Optional{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Compares two optional values using a specified comparer for values.
            </summary>
            <typeparam name="T">The underlying type of the <see cref="T:Gapotchenko.FX.Optional`1"/> generic type.</typeparam>
            <param name="x">The first optional value to compare.</param>
            <param name="y">The second optional value to compare.</param>
            <param name="valueComparer">The value comparer.</param>
            <returns>The comparison result.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Optional.Compare``1(Gapotchenko.FX.Optional{``0},Gapotchenko.FX.Optional{``0})">
            <summary>
            Compares two optional values.
            </summary>
            <typeparam name="T">The underlying type of the <see cref="T:Gapotchenko.FX.Optional`1"/> generic type.</typeparam>
            <param name="x">The first optional value to compare.</param>
            <param name="y">The second optional value to compare.</param>
            <returns>The comparison result.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Optional.CreateComparer``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Creates a new comparer for <see cref="T:Gapotchenko.FX.Optional`1"/> values with a specified comparer for <typeparamref name="T"/> values.
            </summary>
            <typeparam name="T">The underlying type of the <see cref="T:Gapotchenko.FX.Optional`1"/> generic type.</typeparam>
            <param name="valueComparer">The value comparer.</param>
            <returns>A new comparer for <see cref="T:Gapotchenko.FX.Optional`1"/> objects.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Optional.CreateEqualityComparer``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a new equality comparer for <see cref="T:Gapotchenko.FX.Optional`1"/> values with a specified comparer for <typeparamref name="T"/> values.
            </summary>
            <typeparam name="T">The underlying type of the <see cref="T:Gapotchenko.FX.Optional`1"/> generic type.</typeparam>
            <param name="valueComparer">The value equality comparer.</param>
            <returns>A new equality comparer for <see cref="T:Gapotchenko.FX.Optional`1"/> objects.</returns>
        </member>
        <member name="T:Gapotchenko.FX.Optional`1">
            <summary>
            Represents an optional value.
            It is similar to <see cref="T:System.Nullable`1"/>, but can also operate with a value of a reference type.
            </summary>
            <typeparam name="T">The underlying type of the <see cref="T:Gapotchenko.FX.Optional`1"/> generic type.</typeparam>
        </member>
        <member name="M:Gapotchenko.FX.Optional`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Gapotchenko.FX.Optional`1"/> structure to the specified value.
            </summary>
            <param name="value">A value.</param>
        </member>
        <member name="P:Gapotchenko.FX.Optional`1.Value">
            <summary>
            Gets the value of the current <see cref="T:Gapotchenko.FX.Optional`1"/> if it has been assigned a valid underlying value.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:Gapotchenko.FX.Optional`1.HasValue"/> property is <c>false</c>.</exception>
        </member>
        <member name="P:Gapotchenko.FX.Optional`1.HasValue">
            <summary>
            Gets a value indicating whether the current <see cref="T:Gapotchenko.FX.Optional`1"/> has a valid value of its underlying type.
            </summary>
        </member>
        <member name="M:Gapotchenko.FX.Optional`1.GetValueOrDefault">
            <summary>
            Retrieves the value of the current <see cref="T:Gapotchenko.FX.Optional`1"/> object, or the object's default value.
            </summary>
            <returns>
            The value of the <see cref="P:Gapotchenko.FX.Optional`1.Value"/> property if the <see cref="P:Gapotchenko.FX.Optional`1.HasValue"/> property is <c>true</c>;
            otherwise, the default value of <typeparamref name="T"/> type.
            </returns>
        </member>
        <member name="M:Gapotchenko.FX.Optional`1.GetValueOrDefault(`0)">
            <summary>
             Retrieves the value of the current <see cref="T:Gapotchenko.FX.Optional`1"/> object, or the specified default value.
            </summary>
            <param name="defaultValue">A value to return if the <see cref="P:Gapotchenko.FX.Optional`1.HasValue"/> property is <c>false</c>.</param>
            <returns>
            The value of the <see cref="P:Gapotchenko.FX.Optional`1.Value"/> property if the <see cref="P:Gapotchenko.FX.Optional`1.HasValue"/> property is <c>true</c>;
            otherwise, the <paramref name="defaultValue"/> parameter.
            </returns>
        </member>
        <member name="M:Gapotchenko.FX.Optional`1.Equals(System.Object)">
            <summary>
            Indicates whether the current <see cref="T:Gapotchenko.FX.Optional`1"/> object is equal to a specified object.
            </summary>
            <param name="obj">An object.</param>
            <returns><c>true</c> if the other parameter is equal to the current <see cref="T:Gapotchenko.FX.Optional`1"/> object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Optional`1.Equals(Gapotchenko.FX.Optional{`0})">
            <summary>
            Indicates whether the current <see cref="T:Gapotchenko.FX.Optional`1"/> object is equal to a specified optional value.
            </summary>
            <param name="other">An optional value.</param>
            <returns><c>true</c> if the other parameter is equal to the current <see cref="T:Gapotchenko.FX.Optional`1"/> object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Optional`1.Equals(`0)">
            <summary>
            Indicates whether the current <see cref="T:Gapotchenko.FX.Optional`1"/> object is equal to a specified value.
            </summary>
            <param name="other">A value.</param>
            <returns><c>true</c> if the other parameter is equal to the current <see cref="T:Gapotchenko.FX.Optional`1"/> object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Optional`1.GetHashCode">
            <summary>
            Retrieves the hash code of the object returned by the <see cref="P:Gapotchenko.FX.Optional`1.Value"/> property.
            </summary>
            <returns>
            The hash code of the object returned by the <see cref="P:Gapotchenko.FX.Optional`1.Value"/> property if the <see cref="P:Gapotchenko.FX.Optional`1.HasValue"/> property is <c>true</c>,
            or zero if the <see cref="P:Gapotchenko.FX.Optional`1.HasValue"/> property is <c>false</c>.
            </returns>
        </member>
        <member name="M:Gapotchenko.FX.Optional`1.ToString">
            <summary>
            Returns the text representation of the value of the current <see cref="T:Gapotchenko.FX.Optional`1"/> object.
            </summary>
            <returns>
            The text representation of the value of the current <see cref="T:Gapotchenko.FX.Optional`1"/> object if the <see cref="P:Gapotchenko.FX.Optional`1.HasValue"/> property is <c>true</c>,
            or an empty string ("") if the <see cref="P:Gapotchenko.FX.Optional`1.HasValue"/> property is <c>false</c>.
            </returns>
        </member>
        <member name="M:Gapotchenko.FX.Optional`1.op_Implicit(`0)~Gapotchenko.FX.Optional{`0}">
            <summary>
            Creates a new <see cref="T:Gapotchenko.FX.Optional`1"/> object initialized to a specified value.
            </summary>
            <param name="value">A value.</param>
        </member>
        <member name="M:Gapotchenko.FX.Optional`1.op_Explicit(Gapotchenko.FX.Optional{`0})~`0">
            <summary>
            Returns the value of a specified <see cref="T:Gapotchenko.FX.Optional`1"/> value.
            </summary>
            <param name="value">A <see cref="T:Gapotchenko.FX.Optional`1"/> value.</param>
        </member>
        <member name="P:Gapotchenko.FX.Optional`1.None">
            <summary>
            <para>
            Returns <see cref="T:Gapotchenko.FX.Optional`1"/> object initialized without a value.
            </para>
            <para>
            Use <seealso cref="M:Gapotchenko.FX.Optional.Some``1(``0)"/> method to create a new <see cref="T:Gapotchenko.FX.Optional`1"/> object initialized to a specified value.
            </para>
            </summary>
            <returns>
            A <see cref="T:Gapotchenko.FX.Optional`1"/> object whose <see cref="P:Gapotchenko.FX.Optional`1.HasValue"/> property is <c>false</c>.
            </returns>
        </member>
        <member name="M:Gapotchenko.FX.Optional`1.System#IComparable{Gapotchenko#FX#Optional{T}}#CompareTo(Gapotchenko.FX.Optional{`0})">
            <summary>
            Compares the current <see cref="T:Gapotchenko.FX.Optional`1"/> object to a specified object
            </summary>
            <param name="other">An object.</param>
            <returns>The comparison result.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Optional`1.op_Equality(Gapotchenko.FX.Optional{`0},Gapotchenko.FX.Optional{`0})">
            <summary>
            Determines whether two specified <see cref="T:Gapotchenko.FX.Optional`1"/> objects are equal.
            </summary>
            <param name="option1">The first <see cref="T:Gapotchenko.FX.Optional`1"/> object.</param>
            <param name="option2">The second <see cref="T:Gapotchenko.FX.Optional`1"/> object.</param>
            <returns><c>true</c> if <paramref name="option1"/> equals <paramref name="option2"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Optional`1.op_Inequality(Gapotchenko.FX.Optional{`0},Gapotchenko.FX.Optional{`0})">
            <summary>
            Determines whether two specified <see cref="T:Gapotchenko.FX.Optional`1"/> objects are not equal.
            </summary>
            <param name="option1">The first <see cref="T:Gapotchenko.FX.Optional`1"/> object.</param>
            <param name="option2">The second <see cref="T:Gapotchenko.FX.Optional`1"/> object.</param>
            <returns><c>true</c> if <paramref name="option1"/> does not equal <paramref name="option2"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Gapotchenko.FX.ProgramExitException">
            <summary>
            Represents a program exit exception.
            Throwing an object of this class should return control to the global main function, which should exit with the given exit code.
            </summary>
        </member>
        <member name="M:Gapotchenko.FX.ProgramExitException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Gapotchenko.FX.ProgramExitException"/> class.
            </summary>
        </member>
        <member name="M:Gapotchenko.FX.ProgramExitException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Gapotchenko.FX.ProgramExitException"/> class with a specified exit code.
            </summary>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:Gapotchenko.FX.ProgramExitException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Gapotchenko.FX.ProgramExitException"/> class with serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="P:Gapotchenko.FX.ProgramExitException.ExitCode">
            <summary>
            Gets the exit code.
            </summary>
        </member>
        <member name="T:Gapotchenko.FX.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Gapotchenko.FX.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Gapotchenko.FX.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Gapotchenko.FX.Properties.Resources.Argument_EmptyValue">
            <summary>
              Looks up a localized string similar to Value cannot be empty..
            </summary>
        </member>
        <member name="P:Gapotchenko.FX.Properties.Resources.Argument_IndexedArrayTooSmall">
            <summary>
              Looks up a localized string similar to Array is not long enough. Check array index and length..
            </summary>
        </member>
        <member name="P:Gapotchenko.FX.Properties.Resources.Argument_InvalidComparison">
            <summary>
              Looks up a localized string similar to Invalid arguments for comparison..
            </summary>
        </member>
        <member name="P:Gapotchenko.FX.Properties.Resources.ArgumentOutOfRange_Index">
            <summary>
              Looks up a localized string similar to Index was out of range. Must be non-negative and less than the size of the collection..
            </summary>
        </member>
        <member name="P:Gapotchenko.FX.Properties.Resources.ValueNotCreated">
            <summary>
              Looks up a localized string similar to Value is not created..
            </summary>
        </member>
        <member name="T:Gapotchenko.FX.Runtime.CompilerServices.TypeTraits`1">
            <summary>
            Provides a quick strongly-typed access to reflection traits of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type to provide the traits for.</typeparam>
        </member>
        <member name="F:Gapotchenko.FX.Runtime.CompilerServices.TypeTraits`1.IsValueType">
            <summary>
            Gets a value indicating whether the type is a value type.
            </summary>
        </member>
        <member name="T:Gapotchenko.FX.Threading.EvaluateOnce">
            <summary>
            Provides static methods for creating <see cref="T:Gapotchenko.FX.Threading.EvaluateOnce`1"/> objects.
            </summary>
        </member>
        <member name="M:Gapotchenko.FX.Threading.EvaluateOnce.Create``1">
            <summary>
            Creates a new instance of the <see cref="T:Gapotchenko.FX.Threading.EvaluateOnce`1"/> struct.
            When lazy evaluation occurs, the default constructor of the target type <typeparamref name="T"/> is used.
            </summary>
            <typeparam name="T">Specifies the type of object that is being lazily evaluated.</typeparam>
            <returns>New <see cref="T:Gapotchenko.FX.Threading.EvaluateOnce`1"/> instance.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Threading.EvaluateOnce.Create``1(System.Func{``0})">
            <summary>
            Creates a new instance of the <see cref="T:Gapotchenko.FX.Threading.EvaluateOnce`1"/> struct.
            </summary>
            <typeparam name="T">Specifies the type of object that is being lazily evaluated.</typeparam>
            <param name="valueFactory">The value factory that is invoked to produce a lazily evaluated value when it is needed.</param>
            <returns>New <see cref="T:Gapotchenko.FX.Threading.EvaluateOnce`1"/> instance.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Threading.EvaluateOnce.Create``1(System.Func{``0},System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Gapotchenko.FX.Threading.EvaluateOnce`1"/> struct.
            </summary>
            <typeparam name="T">Specifies the type of object that is being lazily evaluated.</typeparam>
            <param name="valueFactory">The value factory that is invoked to produce a lazily evaluated value when it is needed.</param>
            <param name="syncLock">
            An object used as the mutually exclusive lock for value evaluation.
            When the given value is null, an unique synchronization lock object is used.
            </param>
            <returns>New <see cref="T:Gapotchenko.FX.Threading.EvaluateOnce`1"/> instance.</returns>
        </member>
        <member name="T:Gapotchenko.FX.Threading.EvaluateOnce`1">
            <summary>
            Provides a thread-safe evaluation strategy which delays the evaluation of an expression until its value is needed.
            </summary>
            <typeparam name="T">Specifies the type of object that is being lazily evaluated.</typeparam>
            <remarks>
            <para>
            <see cref="T:Gapotchenko.FX.Threading.EvaluateOnce`1"/> is a struct and thus sometimes it may be a better choice than <see cref="T:System.Lazy`1"/> in terms of performance and memory allocation.
            </para>
            <para>
            <see cref="T:Gapotchenko.FX.Threading.EvaluateOnce`1"/> is thread-safe.
            </para>
            </remarks>
        </member>
        <member name="M:Gapotchenko.FX.Threading.EvaluateOnce`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Gapotchenko.FX.Threading.EvaluateOnce`1"/> struct.
            </summary>
            <param name="valueFactory">The value factory that is invoked to produce a lazily evaluated value when it is needed.</param>
        </member>
        <member name="M:Gapotchenko.FX.Threading.EvaluateOnce`1.#ctor(System.Func{`0},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Gapotchenko.FX.Threading.EvaluateOnce`1"/> struct.
            </summary>
            <param name="valueFactory">The value factory that is invoked to produce a lazily evaluated value when it is needed.</param>
            <param name="syncLock">
            An object used as the mutually exclusive lock for value evaluation.
            When the given value is <c>null</c>, an unique synchronization lock object is used.
            </param>
        </member>
        <member name="P:Gapotchenko.FX.Threading.EvaluateOnce`1.Value">
            <summary>
            Gets the lazily evaluated value of the current <see cref="T:Gapotchenko.FX.Threading.EvaluateOnce`1"/> instance.
            </summary>
        </member>
        <member name="P:Gapotchenko.FX.Threading.EvaluateOnce`1.IsValueCreated">
            <summary>
            Gets a value that indicates whether a value has been created for this <see cref="T:Gapotchenko.FX.Threading.EvaluateOnce`1"/> instance.
            </summary>
        </member>
        <member name="M:Gapotchenko.FX.Threading.EvaluateOnce`1.ToString">
            <summary>
            Creates and returns a string representation of the <see cref="P:Gapotchenko.FX.Threading.EvaluateOnce`1.Value"/> property for this instance.
            </summary>
            <returns>
            The result of calling the <see cref="M:System.Object.ToString"/> method on the <see cref="P:Gapotchenko.FX.Threading.EvaluateOnce`1.Value"/> property for this instance,
            if the value has been created (that is, if the <see cref="P:Gapotchenko.FX.Threading.EvaluateOnce`1.IsValueCreated"/> property returns <c>true</c>).
            Otherwise, a string indicating that the value has not been created.
            </returns>
        </member>
        <member name="T:Gapotchenko.FX.Threading.ExecuteOnce">
            <summary>
            Provides a thread-safe strategy which delays the execution of an action until its explicitly asserted with <see cref="M:Gapotchenko.FX.Threading.ExecuteOnce.EnsureExecuted"/> method.
            </summary>
        </member>
        <member name="M:Gapotchenko.FX.Threading.ExecuteOnce.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Gapotchenko.FX.Threading.ExecuteOnce"/> struct.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Gapotchenko.FX.Threading.ExecuteOnce.#ctor(System.Action,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Gapotchenko.FX.Threading.ExecuteOnce"/> struct.
            </summary>
            <param name="action">The action.</param>
            <param name="syncLock">
            An object used as the mutually exclusive lock for action execution.
            When the given value is null, an unique synchronization lock object is used.
            </param>
        </member>
        <member name="M:Gapotchenko.FX.Threading.ExecuteOnce.EnsureExecuted">
            <summary>
            Ensures that the action was executed.
            </summary>
        </member>
        <member name="P:Gapotchenko.FX.Threading.ExecuteOnce.IsExecuted">
            <summary>
            Gets a value indicating whether the action was executed.
            </summary>
        </member>
        <member name="T:Gapotchenko.FX.Threading.LazyInitializerEx">
            <summary>
            Provides extended routines for lazy initialization.
            </summary>
        </member>
        <member name="M:Gapotchenko.FX.Threading.LazyInitializerEx.EnsureInitialized``1(``0@,System.Boolean@,System.Object,System.Func{``0})">
            <summary>
            Initializes a target reference or value type by using a specified function if it hasn't already been initialized.
            </summary>
            <typeparam name="TTarget">The type of the target to be initialized.</typeparam>
            <param name="target">A reference or value of type <typeparamref name="TTarget"/> to initialize if it hasn't already been initialized.</param>
            <param name="initialized">A reference to a <see cref="T:System.Boolean"/> value that determines whether the target has already been initialized.</param>
            <param name="syncLock">An object used as the mutually exclusive lock for initializing target.</param>
            <param name="valueFactory">The function that is called to initialize the reference or value.</param>
            <returns>The initialized value of type <typeparamref name="TTarget"/>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Threading.LazyInitializerEx.EnsureInitialized(System.Object@)">
            <summary>
            Initializes a target <see cref="T:System.Object"/> type with the type's default constructor if it hasn't already been initialized.
            </summary>
            <param name="target">A reference of <see cref="T:System.Object"/> type to initialize if it has not already been initialized.</param>
            <returns>The initialized reference of <see cref="T:System.Object"/> type.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Threading.LazyInitializerEx.EnsureInitialized(System.Boolean@,System.Object@,System.Action)">
            <summary>
            Initializes a target entity by executing supplied action if it hasn't already been initialized.
            </summary>
            <param name="initialized">A reference to a <see cref="T:System.Boolean"/> value that determines whether the target has already been initialized.</param>
            <param name="syncLock">A reference to an object used as the mutually exclusive lock for initializing target. If syncLock is null, a new object will be instantiated.</param>
            <param name="action">The action that is called to initialize the target entity.</param>
        </member>
        <member name="M:Gapotchenko.FX.Threading.LazyInitializerEx.EnsureInitialized(System.Boolean@,System.Object,System.Action)">
            <summary>
            Initializes a target entity by executing supplied action if it hasn't already been initialized.
            </summary>
            <param name="initialized">A reference to a <see cref="T:System.Boolean"/> value that determines whether the target has already been initialized.</param>
            <param name="syncLock">An object used as the mutually exclusive lock for initializing target.</param>
            <param name="action">The action that is called to initialize the target entity.</param>
        </member>
        <member name="M:Gapotchenko.FX.Threading.LazyInitializerEx.EnsureInitialized``1(System.Boolean@,System.Object@,System.Action{``0},``0)">
            <summary>
            Initializes a target entity by executing supplied action if it hasn't already been initialized.
            </summary>
            <typeparam name="TState">The type of the state passed to the action.</typeparam>
            <param name="initialized">A reference to a <see cref="T:System.Boolean"/> value that determines whether the target has already been initialized.</param>
            <param name="syncLock">A reference to an object used as the mutually exclusive lock for initializing target. If syncLock is null, a new object will be instantiated.</param>
            <param name="action">The action that is called to initialize the target entity.</param>
            <param name="state">The state passed to the action.</param>
        </member>
        <member name="M:Gapotchenko.FX.Threading.LazyInitializerEx.EnsureInitialized``1(System.Boolean@,System.Object,System.Action{``0},``0)">
            <summary>
            Initializes a target entity by executing supplied action if it hasn't already been initialized.
            </summary>
            <typeparam name="TState">The type of the state passed to the action.</typeparam>
            <param name="initialized">A reference to a <see cref="T:System.Boolean"/> value that determines whether the target has already been initialized.</param>
            <param name="syncLock">An object used as the mutually exclusive lock for initializing target.</param>
            <param name="action">The action that is called to initialize the target entity.</param>
            <param name="state">The state passed to the action.</param>
        </member>
        <member name="M:Gapotchenko.FX.Threading.LazyInitializerEx.EnsureInitialized``2(``0@,System.Boolean@,System.Object@,System.Func{``1,``0},``1)">
            <summary>
            Initializes a target reference or value type by using a specified function if it hasn't already been initialized.
            </summary>
            <typeparam name="TTarget">The type of the target to be initialized.</typeparam>
            <typeparam name="TState">The type of the state passed to the value factory.</typeparam>
            <param name="target">A reference or value of type <typeparamref name="TTarget"/> to initialize if it hasn't already been initialized.</param>
            <param name="initialized">A reference to a <see cref="T:System.Boolean"/> value that determines whether the target has already been initialized.</param>
            <param name="syncLock">A reference to an object used as the mutually exclusive lock for initializing target. If syncLock is null, a new object will be instantiated.</param>
            <param name="valueFactory">The function that is called to initialize the reference or value.</param>
            <param name="state">The state passed to the value factory.</param>
        </member>
        <member name="M:Gapotchenko.FX.Threading.LazyInitializerEx.EnsureInitialized``2(``0@,System.Boolean@,System.Object,System.Func{``1,``0},``1)">
            <summary>
            Initializes a target reference or value type by using a specified function if it hasn't already been initialized.
            </summary>
            <typeparam name="TTarget">The type of the target to be initialized.</typeparam>
            <typeparam name="TState">The type of the state passed to the value factory.</typeparam>
            <param name="target">A reference or value of type <typeparamref name="TTarget"/> to initialize if it hasn't already been initialized.</param>
            <param name="initialized">A reference to a <see cref="T:System.Boolean"/> value that determines whether the target has already been initialized.</param>
            <param name="syncLock">An object used as the mutually exclusive lock for initializing target.</param>
            <param name="valueFactory">The function that is called to initialize the reference or value.</param>
            <param name="state">The state passed to the value factory.</param>
        </member>
        <member name="M:Gapotchenko.FX.Threading.LazyInitializerEx.EnsureInitialized(System.Object@,System.Action@)">
            <summary>
            Initializes a target entity by executing supplied action if it hasn't already been initialized.
            </summary>
            <param name="syncLock">
            A reference to an object used as the mutually exclusive lock for initializing target.
            If <paramref name="syncLock"/> is null, a new object will be instantiated.</param>
            <param name="action">
            A reference to an action that is called to initialize the target entity.
            Once entity is initialized, the action is filled with a null value indicating that the target has already been initialized.
            </param>
        </member>
        <member name="M:Gapotchenko.FX.Threading.LazyInitializerEx.EnsureInitialized``1(``0@,System.Object@,System.Func{``0}@)">
            <summary>
            Initializes a target reference or value type by using a specified function if it hasn't already been initialized.
            </summary>
            <typeparam name="TTarget">The type of the target to be initialized.</typeparam>
            <param name="target">A reference or value of type <typeparamref name="TTarget"/> to initialize if it hasn't already been initialized.</param>
            <param name="syncLock">A reference to an object used as the mutually exclusive lock for initializing target. If <paramref name="syncLock"/> is <c>null</c>, a new object will be instantiated.</param>
            <param name="valueFactory">
            A reference to a function that is called to initialize the target.
            Once target is initialized, the <paramref name="valueFactory"/> is set to <c>null</c> indicating that the target has already been initialized.
            </param>
        </member>
        <member name="M:Gapotchenko.FX.Threading.LazyInitializerEx.EnsureInitialized``2(``0@,System.Object,System.Func{``1,``0},``1)">
            <summary>
            Initializes a target reference by using a specified function if it hasn't already been initialized.
            </summary>
            <typeparam name="TTarget">The type of the target to be initialized.</typeparam>
            <typeparam name="TState">The type of the state passed to the value factory.</typeparam>
            <param name="target">A reference of type <typeparamref name="TTarget"/> to initialize if it hasn't already been initialized.</param>
            <param name="syncLock">An object used as the mutually exclusive lock for initializing target.</param>
            <param name="valueFactory">The function that is called to initialize the reference or value.</param>
            <param name="state">The state passed to the value factory.</param>
            <returns>The initialized value of type <typeparamref name="TTarget"/>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Threading.LazyInitializerEx.EnsureInitialized``2(``0@,System.Object@,System.Func{``1,``0},``1)">
            <summary>
            Initializes a target reference by using a specified function if it hasn't already been initialized.
            </summary>
            <typeparam name="TTarget">The type of the target to be initialized.</typeparam>
            <typeparam name="TState">The type of the state passed to the value factory.</typeparam>
            <param name="target">A reference of type <typeparamref name="TTarget"/> to initialize if it hasn't already been initialized.</param>
            <param name="syncLock">A reference to an object used as the mutually exclusive lock for initializing target. If syncLock is null, a new object will be instantiated.</param>
            <param name="valueFactory">The function that is called to initialize the reference or value.</param>
            <param name="state">The state passed to the value factory.</param>
            <returns>The initialized value of type <typeparamref name="TTarget"/>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Threading.LazyInitializerEx.EnsureInitialized``1(``0@,System.Object,System.Func{``0})">
            <summary>
            Initializes a target reference by using a specified function if it hasn't already been initialized.
            </summary>
            <typeparam name="TTarget">The type of the target to be initialized.</typeparam>
            <param name="target">A reference of type <typeparamref name="TTarget"/> to initialize if it hasn't already been initialized.</param>
            <param name="syncLock">An object used as the mutually exclusive lock for initializing target.</param>
            <param name="valueFactory">The function that is called to initialize the reference or value.</param>
            <returns>The initialized value of type <typeparamref name="TTarget"/>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Threading.LazyInitializerEx.EnsureInitialized``1(``0@,System.Object@,System.Func{``0})">
            <summary>
            Initializes a target reference by using a specified function if it hasn't already been initialized.
            </summary>
            <typeparam name="TTarget">The type of the target to be initialized.</typeparam>
            <param name="target">A reference of type <typeparamref name="TTarget"/> to initialize if it hasn't already been initialized.</param>
            <param name="syncLock">A reference to an object used as the mutually exclusive lock for initializing target. If syncLock is null, a new object will be instantiated.</param>
            <param name="valueFactory">The function that is called to initialize the reference or value.</param>
            <returns>The initialized value of type <typeparamref name="TTarget"/>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Threading.LazyInitializerEx.EnsureInitialized``1(Gapotchenko.FX.Optional{``0}@,System.Object,System.Func{``0})">
            <summary>
            Initializes an optional target reference by using a specified function if it hasn't already been initialized.
            </summary>
            <typeparam name="TTarget">The type of the target to be initialized.</typeparam>
            <param name="target">A reference of type <see cref="T:Gapotchenko.FX.Optional`1"/> to initialize if it hasn't already been initialized.</param>
            <param name="syncLock">An object used as the mutually exclusive lock for initializing target.</param>
            <param name="valueFactory">The function that is called to initialize the reference or value.</param>
            <returns>The initialized value of type <typeparamref name="TTarget"/>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.Threading.LazyInitializerEx.EnsureInitialized``1(Gapotchenko.FX.Optional{``0}@,System.Object@,System.Func{``0})">
            <summary>
            Initializes an optional target reference by using a specified function if it hasn't already been initialized.
            </summary>
            <typeparam name="TTarget">The type of the target to be initialized.</typeparam>
            <param name="target">A reference of type <see cref="T:Gapotchenko.FX.Optional`1"/> to initialize if it hasn't already been initialized.</param>
            <param name="syncLock">A reference to an object used as the mutually exclusive lock for initializing target. If syncLock is null, a new object will be instantiated.</param>
            <param name="valueFactory">The function that is called to initialize the reference or value.</param>
            <returns>The initialized value of type <typeparamref name="TTarget"/>.</returns>
        </member>
        <member name="T:Gapotchenko.FX.Unit">
            <summary>
            A special type that allows only one value (<c>null</c>), and thus can hold no information.
            </summary>
        </member>
        <member name="T:Gapotchenko.FX.UriQueryBuilder">
            <summary>
            Represents a mutable string of name/value pairs for the query part of an URI.
            It can be used separately or in conjunction with <see cref="T:System.UriBuilder"/> class.
            </summary>
        </member>
        <member name="F:Gapotchenko.FX.UriQueryBuilder.QuerySeparator">
            <summary>
            Provides a character used to separate a query within a URI.
            </summary>
        </member>
        <member name="F:Gapotchenko.FX.UriQueryBuilder.ParameterSeparator">
            <summary>
            Provides a character used to separate parameters in a query.
            </summary>
        </member>
        <member name="M:Gapotchenko.FX.UriQueryBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Gapotchenko.FX.UriQueryBuilder"/> class.
            </summary>
        </member>
        <member name="M:Gapotchenko.FX.UriQueryBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gapotchenko.FX.UriQueryBuilder"/> class using the specified string.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:Gapotchenko.FX.UriQueryBuilder.AppendParameter(System.String,System.String)">
            <summary>
            Appends a query parameter to this instance.
            </summary>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <returns>The <see cref="T:Gapotchenko.FX.UriQueryBuilder"/> instance.</returns>
        </member>
        <member name="M:Gapotchenko.FX.UriQueryBuilder.AppendParameter(System.String,System.String,System.String)">
            <summary>
            Appends a query parameter to the given URI.
            </summary>
            <param name="uri">The URI.</param>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <returns>The URI with an appended query parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.UriQueryBuilder.AppendParameter(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Appends specified query parameters to the given URI.
            </summary>
            <param name="uri">The URI.</param>
            <param name="name1">The name of the first parameter.</param>
            <param name="value1">The value of the first parameter.</param>
            <param name="name2">The name of the second parameter.</param>
            <param name="value2">The value of the second parameter.</param>
            <returns>The URI with an appended query parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.UriQueryBuilder.AppendParameter(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Appends specified query parameters to the given URI.
            </summary>
            <param name="uri">The URI.</param>
            <param name="name1">The name of the first parameter.</param>
            <param name="value1">The value of the first parameter.</param>
            <param name="name2">The name of the second parameter.</param>
            <param name="value2">The value of the second parameter.</param>
            <param name="name3">The name of the third parameter.</param>
            <param name="value3">The value of the third parameter.</param>
            <returns>The URI with an appended query parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.UriQueryBuilder.AppendParameter(System.Uri,System.String,System.String)">
            <summary>
            Appends a query parameter to the given <see cref="T:System.Uri"/>.
            </summary>
            <param name="uri">The URI.</param>
            <param name="name">The parameter name.</param>
            <param name="value">The parameter value.</param>
            <returns>The <see cref="T:System.Uri"/> with an appended query parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.UriQueryBuilder.AppendParameter(System.Uri,System.String,System.String,System.String,System.String)">
            <summary>
            Appends specified query parameters to the given URI.
            </summary>
            <param name="uri">The URI.</param>
            <param name="name1">The name of the first parameter.</param>
            <param name="value1">The value of the first parameter.</param>
            <param name="name2">The name of the second parameter.</param>
            <param name="value2">The value of the second parameter.</param>
            <returns>The URI with an appended query parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.UriQueryBuilder.AppendParameter(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Appends specified query parameters to the given URI.
            </summary>
            <param name="uri">The URI.</param>
            <param name="name1">The name of the first parameter.</param>
            <param name="value1">The value of the first parameter.</param>
            <param name="name2">The name of the second parameter.</param>
            <param name="value2">The value of the second parameter.</param>
            <param name="name3">The name of the third parameter.</param>
            <param name="value3">The value of the third parameter.</param>
            <returns>The URI with an appended query parameter.</returns>
        </member>
        <member name="M:Gapotchenko.FX.UriQueryBuilder.HasParameter(System.String)">
            <summary>
            Checks whether a query in this instance has a parameter with the given name.
            </summary>
            <param name="name">The parameter name.</param>
            <returns><c>true</c> if a query has a parameter with the given name; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Gapotchenko.FX.UriQueryBuilder.Clear">
            <summary>
            Removes all the characters from a query string in this instance.
            </summary>
            <returns>The <see cref="T:Gapotchenko.FX.UriQueryBuilder"/> instance.</returns>
        </member>
        <member name="P:Gapotchenko.FX.UriQueryBuilder.Length">
            <summary>
            Gets the length of a query string in this instance.
            </summary>
        </member>
        <member name="M:Gapotchenko.FX.UriQueryBuilder.ToString">
            <summary>
            Converts the value of this instance to a <see cref="T:System.String"/>.
            </summary>
            <returns>A string whose value is the same as this instance.</returns>
        </member>
        <member name="M:Gapotchenko.FX.UriQueryBuilder.CombineWithUri(System.String)">
            <summary>
            Converts the value of this instance to a <see cref="T:System.String"/> and combines it with the given URI.
            </summary>
            <param name="uri">The URI to combine with.</param>
            <returns>The combined URI.</returns>
        </member>
        <member name="M:Gapotchenko.FX.UriQueryBuilder.CombineWithUri(System.Uri)">
            <summary>
            Converts the value of this instance to a <see cref="T:System.String"/> and combines it with the given <see cref="T:System.Uri"/>.
            </summary>
            <param name="uri">The URI to combine with.</param>
            <returns>The combined URI.</returns>
        </member>
        <member name="M:Gapotchenko.FX.UriQueryBuilder.CombineWithUri(System.String,System.String)">
            <summary>
            Combines a query with a URI.
            </summary>
            <param name="uri">The URI.</param>
            <param name="query">The query.</param>
            <returns>The combined URI.</returns>
        </member>
        <member name="M:Gapotchenko.FX.UriQueryBuilder.CombineWithUri(System.Uri,System.String)">
            <summary>
            Combines a query with a URI.
            </summary>
            <param name="uri">The URI.</param>
            <param name="query">The query.</param>
            <returns>The combined URI.</returns>
        </member>
        <member name="T:System.HashCode">
            <summary>
            <para>
            Provides extended functionality for building, combining and diffusing hash codes.
            </para>
            <para>
            This is a polyfill provided by Gapotchenko.FX.
            </para>
            </summary>
        </member>
        <member name="M:System.HashCode.Combine``1(``0)">
            <summary>
            Provides a way of diffusing bits from something with a limited input hash space.
            For example, many enums only have a few possible hashes, only using the bottom few bits of the code.
            Some collections are built on the assumption that hashes are spread over a larger space,
            so diffusing the bits may help the collection work more efficiently.
            </summary>
            <typeparam name="T">The type of value.</typeparam>
            <param name="value">The value.</param>
            <returns>The diffused hash code.</returns>
        </member>
        <member name="M:System.HashCode.Combine``2(``0,``1)">
            <summary>
            Combines hash codes of the specified values.
            </summary>
            <typeparam name="T1">The type of a first value.</typeparam>
            <typeparam name="T2">The type of a second value</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>The combined hash code.</returns>
        </member>
        <member name="M:System.HashCode.Combine``3(``0,``1,``2)">
            <summary>
            Combines hash codes of the specified values.
            </summary>
            <typeparam name="T1">The type of a first value.</typeparam>
            <typeparam name="T2">The type of a second value</typeparam>
            <typeparam name="T3">The type of a third value</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="value3">The third value.</param>
            <returns>The combined hash code.</returns>
        </member>
        <member name="M:System.HashCode.Combine``4(``0,``1,``2,``3)">
            <summary>
            Combines hash codes of the specified values.
            </summary>
            <typeparam name="T1">The type of a first value.</typeparam>
            <typeparam name="T2">The type of a second value</typeparam>
            <typeparam name="T3">The type of a third value</typeparam>
            <typeparam name="T4">The type of a fourth value</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="value3">The third value.</param>
            <param name="value4">The fourth value.</param>
            <returns>The combined hash code.</returns>
        </member>
        <member name="M:System.HashCode.Combine``5(``0,``1,``2,``3,``4)">
            <summary>
            Combines hash codes of the specified values.
            </summary>
            <typeparam name="T1">The type of a first value.</typeparam>
            <typeparam name="T2">The type of a second value</typeparam>
            <typeparam name="T3">The type of a third value</typeparam>
            <typeparam name="T4">The type of a fourth value</typeparam>
            <typeparam name="T5">The type of a fifth value</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="value3">The third value.</param>
            <param name="value4">The fourth value.</param>
            <param name="value5">The fifth value.</param>
            <returns>The combined hash code.</returns>
        </member>
        <member name="M:System.HashCode.Combine``6(``0,``1,``2,``3,``4,``5)">
            <summary>
            Combines hash codes of the specified values.
            </summary>
            <typeparam name="T1">The type of a first value.</typeparam>
            <typeparam name="T2">The type of a second value</typeparam>
            <typeparam name="T3">The type of a third value</typeparam>
            <typeparam name="T4">The type of a fourth value</typeparam>
            <typeparam name="T5">The type of a fifth value</typeparam>
            <typeparam name="T6">The type of a sixth value</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="value3">The third value.</param>
            <param name="value4">The fourth value.</param>
            <param name="value5">The fifth value.</param>
            <param name="value6">The sixth value.</param>
            <returns>The combined hash code.</returns>
        </member>
        <member name="M:System.HashCode.Combine``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Combines hash codes of the specified values.
            </summary>
            <typeparam name="T1">The type of a first value.</typeparam>
            <typeparam name="T2">The type of a second value</typeparam>
            <typeparam name="T3">The type of a third value</typeparam>
            <typeparam name="T4">The type of a fourth value</typeparam>
            <typeparam name="T5">The type of a fifth value</typeparam>
            <typeparam name="T6">The type of a sixth value</typeparam>
            <typeparam name="T7">The type of a seventh value</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="value3">The third value.</param>
            <param name="value4">The fourth value.</param>
            <param name="value5">The fifth value.</param>
            <param name="value6">The sixth value.</param>
            <param name="value7">The seventh value.</param>
            <returns>The combined hash code.</returns>
        </member>
        <member name="M:System.HashCode.Combine``8(``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Combines hash codes of the specified values.
            </summary>
            <typeparam name="T1">The type of a first value.</typeparam>
            <typeparam name="T2">The type of a second value</typeparam>
            <typeparam name="T3">The type of a third value</typeparam>
            <typeparam name="T4">The type of a fourth value</typeparam>
            <typeparam name="T5">The type of a fifth value</typeparam>
            <typeparam name="T6">The type of a sixth value</typeparam>
            <typeparam name="T7">The type of a seventh value</typeparam>
            <typeparam name="T8">The type of an eighth value</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="value3">The third value.</param>
            <param name="value4">The fourth value.</param>
            <param name="value5">The fifth value.</param>
            <param name="value6">The sixth value.</param>
            <param name="value7">The seventh value.</param>
            <param name="value8">The eigths value.</param>
            <returns>The combined hash code.</returns>
        </member>
        <member name="M:System.HashCode.Add``1(``0)">
            <summary>
            Adds hash code of the specified value to this instance.
            </summary>
            <typeparam name="T">The type of value.</typeparam>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.HashCode.Add``1(``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Adds hash code of the specified value to this instance.
            </summary>
            <typeparam name="T">The type of value.</typeparam>
            <param name="value">The value.</param>
            <param name="comparer">The equality comparer.</param>
        </member>
        <member name="M:System.HashCode.ToHashCode">
            <summary>
            Converts the value of this instance to a hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:System.HashCode.GetHashCode">
            <summary>
            <see cref="T:System.HashCode"/> is a mutable struct and should not be compared with other HashCodes. Use <see cref="M:System.HashCode.ToHashCode"/> to retrieve the computed hash code.
            </summary>
            <returns>Always throws <see cref="T:System.NotSupportedException"/>.</returns>
        </member>
        <member name="M:System.HashCode.Equals(System.Object)">
            <summary>
            <see cref="T:System.HashCode"/> is a mutable struct and should not be compared with other HashCodes.
            </summary>
            <returns>Always throws <see cref="T:System.NotSupportedException"/>.</returns>
        </member>
        <member name="T:System.Reflection.CustomAttributeExtensions">
            <summary>
            <para>
            Contains static methods for retrieving custom attributes.
            </para>
            <para>
            This is a polyfill provided by Gapotchenko.FX.
            </para>
            </summary>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Assembly,System.Type)">
            <summary>
            Retrieves a custom attribute of a specified type that is applied to a specified assembly.
            </summary>
            <param name="element">The assembly to inspect.</param>
            <param name="attributeType">The type of attribute to search for.</param>
            <returns>A custom attribute that matches <paramref name="attributeType"/>, or null if no such attribute is found.</returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Module,System.Type)">
            <summary>
            Retrieves a custom attribute of a specified type that is applied to a specified module.
            </summary>
            <param name="element">The module to inspect.</param>
            <param name="attributeType">The type of attribute to search for.</param>
            <returns>A custom attribute that matches <paramref name="attributeType"/>, or null if no such attribute is found.</returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Retrieves a custom attribute of a specified type that is applied to a specified member.
            </summary>
            <param name="element">The member to inspect.</param>
            <param name="attributeType">The type of attribute to search for.</param>
            <returns>A custom attribute that matches <paramref name="attributeType"/>, or null if no such attribute is found.</returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)">
            <summary>
            Retrieves a custom attribute of a specified type that is applied to a specified parameter.
            </summary>
            <param name="element">The parameter to inspect.</param>
            <param name="attributeType">The type of attribute to search for.</param>
            <returns>A custom attribute that matches <paramref name="attributeType"/>, or null if no such attribute is found.</returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Assembly)">
            <summary>
            Retrieves a custom attribute of a specified type that is applied to a specified assembly.
            </summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="element">The assembly to inspect.</param>
            <returns>A custom attribute that matches <typeparamref name="T"/>, or null if no such attribute is found.</returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Module)">
            <summary>
            Retrieves a custom attribute of a specified type that is applied to a specified module.
            </summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="element">The module to inspect.</param>
            <returns>A custom attribute that matches <typeparamref name="T"/>, or null if no such attribute is found.</returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Retrieves a custom attribute of a specified type that is applied to a specified member.
            </summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="element">The member to inspect.</param>
            <returns>A custom attribute that matches <typeparamref name="T"/>, or null if no such attribute is found.</returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.ParameterInfo)">
            <summary>
            Retrieves a custom attribute of a specified type that is applied to a specified parameter.
            </summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="element">The parameter to inspect.</param>
            <returns>A custom attribute that matches <typeparamref name="T"/>, or null if no such attribute is found.</returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Retrieves a custom attribute of a specified type that is applied to a specified member,
            and optionally inspects the ancestors of that member.
            </summary>
            <param name="element">The member to inspect.</param>
            <param name="attributeType">The type of attribute to search for.</param>
            <param name="inherit"><c>true</c> to inspect the ancestors of element; otherwise, <c>false</c>.</param>
            <returns>A custom attribute that matches <paramref name="attributeType"/>, or null if no such attribute is found.</returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
            <summary>
            Retrieves a custom attribute of a specified type that is applied to a specified parameter,
            and optionally inspects the ancestors of that parameter.
            </summary>
            <param name="element">The parameter to inspect.</param>
            <param name="attributeType">The type of attribute to search for.</param>
            <param name="inherit"><c>true</c> to inspect the ancestors of element; otherwise, <c>false</c>.</param>
            <returns>A custom attribute that matches <paramref name="attributeType"/>, or null if no such attribute is found.</returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Retrieves a custom attribute of a specified type that is applied to a specified member,
            and optionally inspects the ancestors of that member.
            </summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="element">The member to inspect.</param>
            <param name="inherit"><c>true</c> to inspect the ancestors of element; otherwise, <c>false</c>.</param>
            <returns>A custom attribute that matches <typeparamref name="T"/>, or null if no such attribute is found.</returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.ParameterInfo,System.Boolean)">
            <summary>
            Retrieves a custom attribute of a specified type that is applied to a specified parameter,
            and optionally inspects the ancestors of that parameter.
            </summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="element">The parameter to inspect.</param>
            <param name="inherit"><c>true</c> to inspect the ancestors of element; otherwise, <c>false</c>.</param>
            <returns>A custom attribute that matches <typeparamref name="T"/>, or null if no such attribute is found.</returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly)">
            <summary>
            Retrieves a collection of custom attributes that are applied to a specified assembly.
            </summary>
            <param name="element">The assembly to inspect.</param>
            <returns>
            A collection of the custom attributes that are applied to element,
            or an empty collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module)">
            <summary>
            Retrieves a collection of custom attributes that are applied to a specified module.
            </summary>
            <param name="element">The module to inspect.</param>
            <returns>
            A collection of the custom attributes that are applied to element,
            or an empty collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)">
            <summary>
            Retrieves a collection of custom attributes that are applied to a specified member.
            </summary>
            <param name="element">The member to inspect.</param>
            <returns>
            A collection of the custom attributes that are applied to element,
            or an empty collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo)">
            <summary>
            Retrieves a collection of custom attributes that are applied to a specified parameter.
            </summary>
            <param name="element">The parameter to inspect.</param>
            <returns>
            A collection of the custom attributes that are applied to element,
            or an empty collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Retrieves a collection of custom attributes that are applied to a specified member,
            and optionally inspects the ancestors of that member.
            </summary>
            <param name="element">The member to inspect.</param>
            <param name="inherit"><c>true</c> to inspect the ancestors of element; otherwise, <c>false</c>.</param>
            <returns>
            A collection of the custom attributes that are applied to element that match the specified criteria,
            or an empty collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)">
            <summary>
            Retrieves a collection of custom attributes that are applied to a specified parameter,
            and optionally inspects the ancestors of that parameter.
            </summary>
            <param name="element">The parameter to inspect.</param>
            <param name="inherit"><c>true</c> to inspect the ancestors of element; otherwise, <c>false</c>.</param>
            <returns>
            A collection of the custom attributes that are applied to element that match the specified criteria,
            or an empty collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)">
            <summary>
            Retrieves a collection of custom attributes of a specified type that are applied to a specified assembly.
            </summary>
            <param name="element">The assembly to inspect.</param>
            <param name="attributeType">The type of attribute to search for.</param>
            <returns>
            A collection of the custom attributes that are applied to element and that match <paramref name="attributeType"/>,
            or an empty collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module,System.Type)">
            <summary>
            Retrieves a collection of custom attributes of a specified type that are applied to a specified module.
            </summary>
            <param name="element">The module to inspect.</param>
            <param name="attributeType">The type of attribute to search for.</param>
            <returns>
            A collection of the custom attributes that are applied to element and that match <paramref name="attributeType"/>,
            or an empty collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Retrieves a collection of custom attributes of a specified type that are applied to a specified member.
            </summary>
            <param name="element">The member to inspect.</param>
            <param name="attributeType">The type of attribute to search for.</param>
            <returns>
            A collection of the custom attributes that are applied to element and that match <paramref name="attributeType"/>,
            or an empty collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)">
            <summary>
            Retrieves a collection of custom attributes of a specified type that are applied to a specified parameter.
            </summary>
            <param name="element">The parameter to inspect.</param>
            <param name="attributeType">The type of attribute to search for.</param>
            <returns>
            A collection of the custom attributes that are applied to element and that match <paramref name="attributeType"/>,
            or an empty collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Assembly)">
            <summary>
            Retrieves a collection of custom attributes of a specified type that are applied to a specified assembly.
            </summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="element">The assembly to inspect.</param>
            <returns>
            A collection of the custom attributes that are applied to element and that match <typeparamref name="T"/>,
            or an empty collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Module)">
            <summary>
            Retrieves a collection of custom attributes of a specified type that are applied to a specified module.
            </summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="element">The module to inspect.</param>
            <returns>
            A collection of the custom attributes that are applied to element and that match <typeparamref name="T"/>,
            or an empty collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            Retrieves a collection of custom attributes of a specified type that are applied to a specified member.
            </summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="element">The member to inspect.</param>
            <returns>
            A collection of the custom attributes that are applied to element and that match <typeparamref name="T"/>,
            or an empty collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.ParameterInfo)">
            <summary>
            Retrieves a collection of custom attributes of a specified type that are applied to a specified parameter.
            </summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="element">The parameter to inspect.</param>
            <returns>
            A collection of the custom attributes that are applied to element and that match <typeparamref name="T"/>,
            or an empty collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Retrieves a collection of custom attributes of a specified type that are applied to a specified member,
            and optionally inspects the ancestors of that member.
            </summary>
            <param name="element">The member to inspect.</param>
            <param name="attributeType">The type of attribute to search for.</param>
            <param name="inherit"><c>true</c> to inspect the ancestors of element; otherwise, <c>false</c>.</param>
            <returns>
            A collection of the custom attributes that are applied to element and that match <paramref name="attributeType"/>,
            or an empty collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
            <summary>
            Retrieves a collection of custom attributes of a specified type that are applied to a specified parameter,
            and optionally inspects the ancestors of that parameter.
            </summary>
            <param name="element">The parameter to inspect.</param>
            <param name="attributeType">The type of attribute to search for.</param>
            <param name="inherit"><c>true</c> to inspect the ancestors of element; otherwise, <c>false</c>.</param>
            <returns>
            A collection of the custom attributes that are applied to element and that match <paramref name="attributeType"/>,
            or an empty collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Retrieves a collection of custom attributes of a specified type that are applied to a specified member,
            and optionally inspects the ancestors of that member.
            </summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="element">The member to inspect.</param>
            <param name="inherit"><c>true</c> to inspect the ancestors of element; otherwise, <c>false</c>.</param>
            <returns>
            A collection of the custom attributes that are applied to element and that match <typeparamref name="T"/>,
            or an empty collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.ParameterInfo,System.Boolean)">
            <summary>
            Retrieves a collection of custom attributes of a specified type that are applied to a specified parameter,
            and optionally inspects the ancestors of that parameter.
            </summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="element">The parameter to inspect.</param>
            <param name="inherit"><c>true</c> to inspect the ancestors of element; otherwise, <c>false</c>.</param>
            <returns>
            A collection of the custom attributes that are applied to element and that match <typeparamref name="T"/>,
            or an empty collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Assembly,System.Type)">
            <summary>
            Indicates whether custom attributes of a specified type are applied to a specified assembly.
            </summary>
            <param name="element">The assembly to inspect.</param>
            <param name="attributeType">The type of the attribute to search for.</param>
            <returns><c>true</c> if an attribute of the specified type is applied to element; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Module,System.Type)">
            <summary>
            Indicates whether custom attributes of a specified type are applied to a specified module.
            </summary>
            <param name="element">The module to inspect.</param>
            <param name="attributeType">The type of the attribute to search for.</param>
            <returns><c>true</c> if an attribute of the specified type is applied to element; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Indicates whether custom attributes of a specified type are applied to a specified member.
            </summary>
            <param name="element">The member to inspect.</param>
            <param name="attributeType">The type of the attribute to search for.</param>
            <returns><c>true</c> if an attribute of the specified type is applied to element; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo,System.Type)">
            <summary>
            Indicates whether custom attributes of a specified type are applied to a specified parameter.
            </summary>
            <param name="element">The parameter to inspect.</param>
            <param name="attributeType">The type of the attribute to search for.</param>
            <returns><c>true</c> if an attribute of the specified type is applied to element; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Indicates whether custom attributes of a specified type are applied to a specified member,
            and, optionally, applied to its ancestors.
            </summary>
            <param name="element">The member to inspect.</param>
            <param name="attributeType">The type of the attribute to search for.</param>
            <param name="inherit"><c>true</c> to inspect the ancestors of element; otherwise, <c>false</c>.</param>
            <returns><c>true</c> if an attribute of the specified type is applied to element; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
            <summary>
            Indicates whether custom attributes of a specified type are applied to a specified parameter,
            and, optionally, applied to its ancestors.
            </summary>
            <param name="element">The parameter to inspect.</param>
            <param name="attributeType">The type of the attribute to search for.</param>
            <param name="inherit"><c>true</c> to inspect the ancestors of element; otherwise, <c>false</c>.</param>
            <returns><c>true</c> if an attribute of the specified type is applied to element; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo">
            <summary>
            <para>
            Represents an exception whose state is captured at a certain point in code.
            </para>
            <para>
            This is a polyfill provided by Gapotchenko.FX.
            </para>
            </summary>
        </member>
        <member name="P:System.Runtime.ExceptionServices.ExceptionDispatchInfo.SourceException">
            <summary>
            Gets the exception that is represented by the current instance.
            </summary>
        </member>
        <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(System.Exception)">
            <summary>
            Creates an <see cref="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo"/> object that represents the specified exception at the current point in code.
            </summary>
            <param name="source">The exception whose state is captured, and which is represented by the returned object.</param>
            <returns>An object that represents the specified exception at the current point in code.</returns>
        </member>
        <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw">
            <summary>
            Throws the exception that is represented by the current <see cref="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo"/> object,
            after restoring the state that was saved when the exception was captured.
            </summary>
        </member>
        <member name="T:System.Runtime.InteropServices.OSPlatform">
            <summary>
            <para>
            Represents an operating system platform.
            </para>
            <para>
            This is a polyfill provided by Gapotchenko.FX.
            </para>
            </summary>
        </member>
        <member name="P:System.Runtime.InteropServices.OSPlatform.Linux">
            <summary>
            Gets an object that represents Linux operating system.
            </summary>
        </member>
        <member name="P:System.Runtime.InteropServices.OSPlatform.OSX">
            <summary>
            Gets an object that represents macOS operating system.
            </summary>
        </member>
        <member name="P:System.Runtime.InteropServices.OSPlatform.Windows">
            <summary>
            Gets an object that represents Windows operating system.
            </summary>
        </member>
        <member name="M:System.Runtime.InteropServices.OSPlatform.Create(System.String)">
            <summary>
            Creates a new <see cref="T:System.Runtime.InteropServices.OSPlatform"/> instance.
            </summary>
            <param name="osPlatform">The name of the platform.</param>
            <returns>An <see cref="T:System.Runtime.InteropServices.OSPlatform"/> instance that represents the operating system specified by <paramref name="osPlatform"/> .</returns>
        </member>
        <member name="M:System.Runtime.InteropServices.OSPlatform.Equals(System.Runtime.InteropServices.OSPlatform)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <c>true</c> if the current object is equal to the object specified by <paramref name="other" /> parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Runtime.InteropServices.OSPlatform.Equals(System.Object)">
            <summary>
            Determines whether a specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Runtime.InteropServices.OSPlatform.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:System.Runtime.InteropServices.OSPlatform.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:System.Runtime.InteropServices.OSPlatform.op_Equality(System.Runtime.InteropServices.OSPlatform,System.Runtime.InteropServices.OSPlatform)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:System.Runtime.InteropServices.OSPlatform.op_Inequality(System.Runtime.InteropServices.OSPlatform,System.Runtime.InteropServices.OSPlatform)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:System.Runtime.InteropServices.RuntimeInformation">
            <summary>
            <para>
            Provides information about the .NET runtime installation.
            </para>
            <para>
            This is a polyfill provided by Gapotchenko.FX.
            </para>
            </summary>
        </member>
        <member name="M:System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform(System.Runtime.InteropServices.OSPlatform)">
            <summary>
            Indicates whether the current app is running on the specified platform.
            </summary>
            <param name="osPlatform">A platform.</param>
            <returns><c>true</c> if the current app is running on the specified platform; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:System.Threading.Volatile">
            <summary>
            <para>
            Provides methods for performing volatile memory operations.
            </para>
            <para>
            This is a polyfill provided by Gapotchenko.FX.
            </para>
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Read(System.Boolean@)">
            <summary>
            Reads the value of the specified field.
            On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations as follows:
            If a read or write appears after this method in the code, the processor cannot move it before this method.
            </summary>
            <param name="location">The field to read.</param>
            <returns>
            The value that was read.
            This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.
            </returns>
        </member>
        <member name="M:System.Threading.Volatile.Write(System.Boolean@,System.Boolean)">
            <summary>
            Writes the specified value to the specified field.
            On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations as follows:
            If a read or write appears before this method in the code, the processor cannot move it after this method.
            </summary>
            <param name="location">The field where the value is written.</param>
            <param name="value">
            The value to write.
            The value is written immediately so that it is visible to all processors in the computer.
            </param>
        </member>
        <member name="M:System.Threading.Volatile.Read(System.Double@)">
            <summary>
            Reads the value of the specified field.
            On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations as follows:
            If a read or write appears after this method in the code, the processor cannot move it before this method.
            </summary>
            <param name="location">The field to read.</param>
            <returns>
            The value that was read.
            This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.
            </returns>
        </member>
        <member name="M:System.Threading.Volatile.Write(System.Double@,System.Double)">
            <summary>
            Writes the specified value to the specified field.
            On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations as follows:
            If a read or write appears before this method in the code, the processor cannot move it after this method.
            </summary>
            <param name="location">The field where the value is written.</param>
            <param name="value">
            The value to write.
            The value is written immediately so that it is visible to all processors in the computer.
            </param>
        </member>
        <member name="M:System.Threading.Volatile.Read(System.Single@)">
            <summary>
            Reads the value of the specified field.
            On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations as follows:
            If a read or write appears after this method in the code, the processor cannot move it before this method.
            </summary>
            <param name="location">The field to read.</param>
            <returns>
            The value that was read.
            This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.
            </returns>
        </member>
        <member name="M:System.Threading.Volatile.Write(System.Single@,System.Single)">
            <summary>
            Writes the specified value to the specified field.
            On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations as follows:
            If a read or write appears before this method in the code, the processor cannot move it after this method.
            </summary>
            <param name="location">The field where the value is written.</param>
            <param name="value">
            The value to write.
            The value is written immediately so that it is visible to all processors in the computer.
            </param>
        </member>
        <member name="M:System.Threading.Volatile.Read(System.UIntPtr@)">
            <summary>
            Reads the value of the specified field.
            On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations as follows:
            If a read or write appears after this method in the code, the processor cannot move it before this method.
            </summary>
            <param name="location">The field to read.</param>
            <returns>
            The value that was read.
            This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.
            </returns>
        </member>
        <member name="M:System.Threading.Volatile.Write(System.UIntPtr@,System.UIntPtr)">
            <summary>
            Writes the specified value to the specified field.
            On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations as follows:
            If a read or write appears before this method in the code, the processor cannot move it after this method.
            </summary>
            <param name="location">The field where the value is written.</param>
            <param name="value">
            The value to write.
            The value is written immediately so that it is visible to all processors in the computer.
            </param>
        </member>
        <member name="M:System.Threading.Volatile.Read(System.IntPtr@)">
            <summary>
            Reads the value of the specified field.
            On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations as follows:
            If a read or write appears after this method in the code, the processor cannot move it before this method.
            </summary>
            <param name="location">The field to read.</param>
            <returns>
            The value that was read.
            This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.
            </returns>
        </member>
        <member name="M:System.Threading.Volatile.Write(System.IntPtr@,System.IntPtr)">
            <summary>
            Writes the specified value to the specified field.
            On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations as follows:
            If a read or write appears before this method in the code, the processor cannot move it after this method.
            </summary>
            <param name="location">The field where the value is written.</param>
            <param name="value">
            The value to write.
            The value is written immediately so that it is visible to all processors in the computer.
            </param>
        </member>
        <member name="M:System.Threading.Volatile.Read(System.UInt64@)">
            <summary>
            Reads the value of the specified field.
            On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations as follows:
            If a read or write appears after this method in the code, the processor cannot move it before this method.
            </summary>
            <param name="location">The field to read.</param>
            <returns>
            The value that was read.
            This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.
            </returns>
        </member>
        <member name="M:System.Threading.Volatile.Write(System.UInt64@,System.UInt64)">
            <summary>
            Writes the specified value to the specified field.
            On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations as follows:
            If a read or write appears before this method in the code, the processor cannot move it after this method.
            </summary>
            <param name="location">The field where the value is written.</param>
            <param name="value">
            The value to write.
            The value is written immediately so that it is visible to all processors in the computer.
            </param>
        </member>
        <member name="M:System.Threading.Volatile.Read(System.Int64@)">
            <summary>
            Reads the value of the specified field.
            On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations as follows:
            If a read or write appears after this method in the code, the processor cannot move it before this method.
            </summary>
            <param name="location">The field to read.</param>
            <returns>
            The value that was read.
            This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.
            </returns>
        </member>
        <member name="M:System.Threading.Volatile.Write(System.Int64@,System.Int64)">
            <summary>
            Writes the specified value to the specified field.
            On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations as follows:
            If a read or write appears before this method in the code, the processor cannot move it after this method.
            </summary>
            <param name="location">The field where the value is written.</param>
            <param name="value">
            The value to write.
            The value is written immediately so that it is visible to all processors in the computer.
            </param>
        </member>
        <member name="M:System.Threading.Volatile.Read(System.Int32@)">
            <summary>
            Reads the value of the specified field.
            On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations as follows:
            If a read or write appears after this method in the code, the processor cannot move it before this method.
            </summary>
            <param name="location">The field to read.</param>
            <returns>
            The value that was read.
            This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.
            </returns>
        </member>
        <member name="M:System.Threading.Volatile.Write(System.Int32@,System.Int32)">
            <summary>
            Writes the specified value to the specified field.
            On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations as follows:
            If a read or write appears before this method in the code, the processor cannot move it after this method.
            </summary>
            <param name="location">The field where the value is written.</param>
            <param name="value">
            The value to write.
            The value is written immediately so that it is visible to all processors in the computer.
            </param>
        </member>
        <member name="M:System.Threading.Volatile.Read(System.UInt16@)">
            <summary>
            Reads the value of the specified field.
            On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations as follows:
            If a read or write appears after this method in the code, the processor cannot move it before this method.
            </summary>
            <param name="location">The field to read.</param>
            <returns>
            The value that was read.
            This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.
            </returns>
        </member>
        <member name="M:System.Threading.Volatile.Write(System.UInt16@,System.UInt16)">
            <summary>
            Writes the specified value to the specified field.
            On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations as follows:
            If a read or write appears before this method in the code, the processor cannot move it after this method.
            </summary>
            <param name="location">The field where the value is written.</param>
            <param name="value">
            The value to write.
            The value is written immediately so that it is visible to all processors in the computer.
            </param>
        </member>
        <member name="M:System.Threading.Volatile.Read(System.Int16@)">
            <summary>
            Reads the value of the specified field.
            On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations as follows:
            If a read or write appears after this method in the code, the processor cannot move it before this method.
            </summary>
            <param name="location">The field to read.</param>
            <returns>
            The value that was read.
            This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.
            </returns>
        </member>
        <member name="M:System.Threading.Volatile.Write(System.Int16@,System.Int16)">
            <summary>
            Writes the specified value to the specified field.
            On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations as follows:
            If a read or write appears before this method in the code, the processor cannot move it after this method.
            </summary>
            <param name="location">The field where the value is written.</param>
            <param name="value">
            The value to write.
            The value is written immediately so that it is visible to all processors in the computer.
            </param>
        </member>
        <member name="M:System.Threading.Volatile.Read(System.Byte@)">
            <summary>
            Reads the value of the specified field.
            On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations as follows:
            If a read or write appears after this method in the code, the processor cannot move it before this method.
            </summary>
            <param name="location">The field to read.</param>
            <returns>
            The value that was read.
            This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.
            </returns>
        </member>
        <member name="M:System.Threading.Volatile.Write(System.Byte@,System.Byte)">
            <summary>
            Writes the specified value to the specified field.
            On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations as follows:
            If a read or write appears before this method in the code, the processor cannot move it after this method.
            </summary>
            <param name="location">The field where the value is written.</param>
            <param name="value">
            The value to write.
            The value is written immediately so that it is visible to all processors in the computer.
            </param>
        </member>
        <member name="M:System.Threading.Volatile.Read(System.SByte@)">
            <summary>
            Reads the value of the specified field.
            On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations as follows:
            If a read or write appears after this method in the code, the processor cannot move it before this method.
            </summary>
            <param name="location">The field to read.</param>
            <returns>
            The value that was read.
            This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.
            </returns>
        </member>
        <member name="M:System.Threading.Volatile.Write(System.SByte@,System.SByte)">
            <summary>
            Writes the specified value to the specified field.
            On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations as follows:
            If a read or write appears before this method in the code, the processor cannot move it after this method.
            </summary>
            <param name="location">The field where the value is written.</param>
            <param name="value">
            The value to write.
            The value is written immediately so that it is visible to all processors in the computer.
            </param>
        </member>
        <member name="M:System.Threading.Volatile.Read(System.UInt32@)">
            <summary>
            Reads the value of the specified field.
            On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations as follows:
            If a read or write appears after this method in the code, the processor cannot move it before this method.
            </summary>
            <param name="location">The field to read.</param>
            <returns>
            The value that was read.
            This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.
            </returns>
        </member>
        <member name="M:System.Threading.Volatile.Write(System.UInt32@,System.UInt32)">
            <summary>
            Writes the specified value to the specified field.
            On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations as follows:
            If a read or write appears before this method in the code, the processor cannot move it after this method.
            </summary>
            <param name="location">The field where the value is written.</param>
            <param name="value">
            The value to write.
            The value is written immediately so that it is visible to all processors in the computer.
            </param>
        </member>
        <member name="M:System.Threading.Volatile.Read``1(``0@)">
            <summary>
            Reads the object reference from the specified field.
            On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations as follows:
            If a read or write appears after this method in the code, the processor cannot move it before this method.
            </summary>
            <typeparam name="T">The type of field to read. This must be a reference type, not a value type.</typeparam>
            <param name="location">The field to read.</param>
            <returns>
            The reference to <typeparamref name="T"/> that was read.
            This reference is the latest written by any processor in the computer,
            regardless of the number of processors or the state of processor cache.        
            </returns>
        </member>
        <member name="M:System.Threading.Volatile.Write``1(``0@,``0)">
            <summary>
            Writes the specified object reference to the specified field.
            On systems that require it,
            inserts a memory barrier that prevents the processor from reordering memory operations as follows:
            If a read or write appears before this method in the code, the processor cannot move it after this method.
            </summary>
            <typeparam name="T">The type of field to write. This must be a reference type, not a value type.</typeparam>
            <param name="location">The field where the object reference is written.</param>
            <param name="value">
            The object reference to write.
            The reference is written immediately so that it is visible to all processors in the computer.
            </param>
        </member>
        <member name="T:System.WeakReference`1">
            <summary>
            <para>
            Represents a typed weak reference, which references an object while still allowing that object to be reclaimed by garbage collection.
            </para>
            <para>
            This is a polyfill provided by Gapotchenko.FX.
            </para>
            </summary>
            <typeparam name="T">The type of the object referenced.</typeparam>
        </member>
        <member name="M:System.WeakReference`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:System.WeakReference`1"/> class that references the specified object.
            </summary>
            <param name="target">The object to reference, or null.</param>
        </member>
        <member name="M:System.WeakReference`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.WeakReference`1"/> class that references the specified object and
            uses the specified resurrection tracking.
            </summary>
            <param name="target">The object to reference, or null.</param>
            <param name="trackResurrection">
            <c>true</c> to track the object after finalization;
            <c>false</c> to track the object only until finalization.
            </param>
        </member>
        <member name="M:System.WeakReference`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object with all the data
             necessary to serialize the current <see cref="T:System.WeakReference`1"/> object.
            </summary>
            <param name="info">An object that holds all the data necessary to serialize or deserialize the current <see cref="T:System.WeakReference`1"/> object.</param>
            <param name="context">The location where serialized data is stored and retrieved.</param>
        </member>
        <member name="M:System.WeakReference`1.SetTarget(`0)">
            <summary>
            Sets the target object that is referenced by this <see cref="T:System.WeakReference`1"/> object.
            </summary>
            <param name="target">The new target object.</param>
        </member>
        <member name="M:System.WeakReference`1.TryGetTarget(`0@)">
            <summary>
            Tries to retrieve the target object that is referenced by the current <see cref="T:System.WeakReference`1"/> object.
            </summary>
            <param name="target">
            When this method returns, contains the target object, if it is available.
            This parameter is treated as uninitialized.
            </param>
            <returns><c>true</c> if the target was retrieved; otherwise, <c>false</c>.</returns>
        </member>
    </members>
</doc>
